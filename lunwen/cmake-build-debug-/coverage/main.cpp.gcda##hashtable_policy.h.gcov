        -:    0:Source:C:/PROGRA~1/JETBRA~1/CLION2~1.1/bin/mingw/lib/gcc/x86_64-w64-mingw32/11.2.0/include/c++/bits/hashtable_policy.h
        -:    0:Graph:C:\Users\86195\Desktop\lunwen\cmake-build-debug-\CMakeFiles\lunwen.dir\main.cpp.gcno
        -:    0:Data:C:\Users\86195\Desktop\lunwen\cmake-build-debug-\CMakeFiles\lunwen.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    1:// Internal policy header for unordered_set and unordered_map -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2010-2021 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/hashtable_policy.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly.
        -:   28: *  @headername{unordered_map,unordered_set}
        -:   29: */
        -:   30:
        -:   31:#ifndef _HASHTABLE_POLICY_H
        -:   32:#define _HASHTABLE_POLICY_H 1
        -:   33:
        -:   34:#include <tuple>		// for std::tuple, std::forward_as_tuple
        -:   35:#include <bits/stl_algobase.h>	// for std::min, std::is_permutation.
        -:   36:#include <ext/numeric_traits.h>	// for __gnu_cxx::__int_traits
        -:   37:
        -:   38:namespace std _GLIBCXX_VISIBILITY(default)
        -:   39:{
        -:   40:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   41:
        -:   42:  template<typename _Key, typename _Value, typename _Alloc,
        -:   43:	   typename _ExtractKey, typename _Equal,
        -:   44:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:   45:	   typename _RehashPolicy, typename _Traits>
        -:   46:    class _Hashtable;
        -:   47:
        -:   48:namespace __detail
        -:   49:{
        -:   50:  /**
        -:   51:   *  @defgroup hashtable-detail Base and Implementation Classes
        -:   52:   *  @ingroup unordered_associative_containers
        -:   53:   *  @{
        -:   54:   */
        -:   55:  template<typename _Key, typename _Value, typename _ExtractKey,
        -:   56:	   typename _Equal, typename _Hash, typename _RangeHash,
        -:   57:	   typename _Unused, typename _Traits>
        -:   58:    struct _Hashtable_base;
        -:   59:
        -:   60:  // Helper function: return distance(first, last) for forward
        -:   61:  // iterators, or 0/1 for input iterators.
        -:   62:  template<class _Iterator>
        -:   63:    inline typename std::iterator_traits<_Iterator>::difference_type
        -:   64:    __distance_fw(_Iterator __first, _Iterator __last,
        -:   65:		  std::input_iterator_tag)
        -:   66:    { return __first != __last ? 1 : 0; }
        -:   67:
        -:   68:  template<class _Iterator>
        -:   69:    inline typename std::iterator_traits<_Iterator>::difference_type
        -:   70:    __distance_fw(_Iterator __first, _Iterator __last,
        -:   71:		  std::forward_iterator_tag)
        -:   72:    { return std::distance(__first, __last); }
        -:   73:
        -:   74:  template<class _Iterator>
        -:   75:    inline typename std::iterator_traits<_Iterator>::difference_type
        -:   76:    __distance_fw(_Iterator __first, _Iterator __last)
        -:   77:    { return __distance_fw(__first, __last,
        -:   78:			   std::__iterator_category(__first)); }
        -:   79:
        -:   80:  struct _Identity
        -:   81:  {
        -:   82:    template<typename _Tp>
        -:   83:      _Tp&&
   355452:   84:      operator()(_Tp&& __x) const noexcept
   355452:   85:      { return std::forward<_Tp>(__x); }
------------------
_ZNKSt8__detail9_IdentityclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_SB_:
function _ZNKSt8__detail9_IdentityclIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_SB_ called 9337 returned 100% blocks executed 100%
     9337:   84:      operator()(_Tp&& __x) const noexcept
     9337:   85:      { return std::forward<_Tp>(__x); }
     9337:   85-block  0
call    0 returned 9337
------------------
_ZNKSt8__detail9_IdentityclIRKjEEOT_S5_:
function _ZNKSt8__detail9_IdentityclIRKjEEOT_S5_ called 346115 returned 100% blocks executed 100%
   346115:   84:      operator()(_Tp&& __x) const noexcept
   346115:   85:      { return std::forward<_Tp>(__x); }
   346115:   85-block  0
call    0 returned 346115
------------------
        -:   86:  };
        -:   87:
        -:   88:  struct _Select1st
        -:   89:  {
        -:   90:    template<typename _Tp>
        -:   91:      auto
  5423300:   92:      operator()(_Tp&& __x) const noexcept
        -:   93:      -> decltype(std::get<0>(std::forward<_Tp>(__x)))
  5423300:   94:      { return std::get<0>(std::forward<_Tp>(__x)); }
------------------
_ZNKSt8__detail10_Select1stclIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSD_:
function _ZNKSt8__detail10_Select1stclIRKSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSD_ called 5222 returned 100% blocks executed 100%
     5222:   92:      operator()(_Tp&& __x) const noexcept
        -:   93:      -> decltype(std::get<0>(std::forward<_Tp>(__x)))
     5222:   94:      { return std::get<0>(std::forward<_Tp>(__x)); }
     5222:   94-block  0
call    0 returned 5222
call    1 returned 5222
------------------
_ZNKSt8__detail10_Select1stclIRKSt4pairIKjdEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS7_:
function _ZNKSt8__detail10_Select1stclIRKSt4pairIKjdEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS7_ called 1685595 returned 100% blocks executed 100%
  1685595:   92:      operator()(_Tp&& __x) const noexcept
        -:   93:      -> decltype(std::get<0>(std::forward<_Tp>(__x)))
  1685595:   94:      { return std::get<0>(std::forward<_Tp>(__x)); }
  1685595:   94-block  0
call    0 returned 1685595
call    1 returned 1685595
------------------
_ZNKSt8__detail10_Select1stclIRKSt4pairIKjPN8cppjieba8TrieNodeEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSA_:
function _ZNKSt8__detail10_Select1stclIRKSt4pairIKjPN8cppjieba8TrieNodeEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOSA_ called 3234494 returned 100% blocks executed 100%
  3234494:   92:      operator()(_Tp&& __x) const noexcept
        -:   93:      -> decltype(std::get<0>(std::forward<_Tp>(__x)))
  3234494:   94:      { return std::get<0>(std::forward<_Tp>(__x)); }
  3234494:   94-block  0
call    0 returned 3234494
call    1 returned 3234494
------------------
_ZNKSt8__detail10_Select1stclIRSt4pairIKjPN8cppjieba8TrieNodeEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_:
function _ZNKSt8__detail10_Select1stclIRSt4pairIKjPN8cppjieba8TrieNodeEEEEDTcl3getILi0EEcl7forwardIT_Efp_EEEOS9_ called 497989 returned 100% blocks executed 100%
   497989:   92:      operator()(_Tp&& __x) const noexcept
        -:   93:      -> decltype(std::get<0>(std::forward<_Tp>(__x)))
   497989:   94:      { return std::get<0>(std::forward<_Tp>(__x)); }
   497989:   94-block  0
call    0 returned 497989
call    1 returned 497989
------------------
        -:   95:  };
        -:   96:
        -:   97:  template<typename _NodeAlloc>
        -:   98:    struct _Hashtable_alloc;
        -:   99:
        -:  100:  // Functor recycling a pool of nodes and using allocation once the pool is
        -:  101:  // empty.
        -:  102:  template<typename _NodeAlloc>
        -:  103:    struct _ReuseOrAllocNode
        -:  104:    {
        -:  105:    private:
        -:  106:      using __node_alloc_type = _NodeAlloc;
        -:  107:      using __hashtable_alloc = _Hashtable_alloc<__node_alloc_type>;
        -:  108:      using __node_alloc_traits =
        -:  109:	typename __hashtable_alloc::__node_alloc_traits;
        -:  110:      using __node_type = typename __hashtable_alloc::__node_type;
        -:  111:
        -:  112:    public:
        -:  113:      _ReuseOrAllocNode(__node_type* __nodes, __hashtable_alloc& __h)
        -:  114:      : _M_nodes(__nodes), _M_h(__h) { }
        -:  115:      _ReuseOrAllocNode(const _ReuseOrAllocNode&) = delete;
        -:  116:
        -:  117:      ~_ReuseOrAllocNode()
        -:  118:      { _M_h._M_deallocate_nodes(_M_nodes); }
        -:  119:
        -:  120:      template<typename _Arg>
        -:  121:	__node_type*
        -:  122:	operator()(_Arg&& __arg) const
        -:  123:	{
        -:  124:	  if (_M_nodes)
        -:  125:	    {
        -:  126:	      __node_type* __node = _M_nodes;
        -:  127:	      _M_nodes = _M_nodes->_M_next();
        -:  128:	      __node->_M_nxt = nullptr;
        -:  129:	      auto& __a = _M_h._M_node_allocator();
        -:  130:	      __node_alloc_traits::destroy(__a, __node->_M_valptr());
        -:  131:	      __try
        -:  132:		{
        -:  133:		  __node_alloc_traits::construct(__a, __node->_M_valptr(),
        -:  134:						 std::forward<_Arg>(__arg));
        -:  135:		}
        -:  136:	      __catch(...)
        -:  137:		{
        -:  138:		  _M_h._M_deallocate_node_ptr(__node);
        -:  139:		  __throw_exception_again;
        -:  140:		}
        -:  141:	      return __node;
        -:  142:	    }
        -:  143:	  return _M_h._M_allocate_node(std::forward<_Arg>(__arg));
        -:  144:	}
        -:  145:
        -:  146:    private:
        -:  147:      mutable __node_type* _M_nodes;
        -:  148:      __hashtable_alloc& _M_h;
        -:  149:    };
        -:  150:
        -:  151:  // Functor similar to the previous one but without any pool of nodes to
        -:  152:  // recycle.
        -:  153:  template<typename _NodeAlloc>
        -:  154:    struct _AllocNode
        -:  155:    {
        -:  156:    private:
        -:  157:      using __hashtable_alloc = _Hashtable_alloc<_NodeAlloc>;
        -:  158:      using __node_type = typename __hashtable_alloc::__node_type;
        -:  159:
        -:  160:    public:
     1549:  161:      _AllocNode(__hashtable_alloc& __h)
     1549:  162:      : _M_h(__h) { }
------------------
_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEEC1ERNS_16_Hashtable_allocIS9_EE:
function _ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEEC1ERNS_16_Hashtable_allocIS9_EE called 1534 returned 100% blocks executed 100%
     1534:  161:      _AllocNode(__hashtable_alloc& __h)
     1534:  162:      : _M_h(__h) { }
------------------
_ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeIjLb0EEEEEC1ERNS_16_Hashtable_allocIS3_EE:
function _ZNSt8__detail10_AllocNodeISaINS_10_Hash_nodeIjLb0EEEEEC1ERNS_16_Hashtable_allocIS3_EE called 15 returned 100% blocks executed 100%
       15:  161:      _AllocNode(__hashtable_alloc& __h)
       15:  162:      : _M_h(__h) { }
------------------
        -:  163:
        -:  164:      template<typename _Arg>
        -:  165:	__node_type*
     1294:  166:	operator()(_Arg&& __arg) const
     1294:  167:	{ return _M_h._M_allocate_node(std::forward<_Arg>(__arg)); }
------------------
_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEEclIRKS7_EEPS8_OT_:
function _ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEEclIRKS7_EEPS8_OT_ called 1279 returned 100% blocks executed 100%
     1279:  166:	operator()(_Arg&& __arg) const
     1279:  167:	{ return _M_h._M_allocate_node(std::forward<_Arg>(__arg)); }
     1279:  167-block  0
call    0 returned 1279
call    1 returned 1279
------------------
_ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeIjLb0EEEEEclIRKjEEPS2_OT_:
function _ZNKSt8__detail10_AllocNodeISaINS_10_Hash_nodeIjLb0EEEEEclIRKjEEPS2_OT_ called 15 returned 100% blocks executed 100%
       15:  166:	operator()(_Arg&& __arg) const
       15:  167:	{ return _M_h._M_allocate_node(std::forward<_Arg>(__arg)); }
       15:  167-block  0
call    0 returned 15
call    1 returned 15
------------------
        -:  168:
        -:  169:    private:
        -:  170:      __hashtable_alloc& _M_h;
        -:  171:    };
        -:  172:
        -:  173:  // Auxiliary types used for all instantiations of _Hashtable nodes
        -:  174:  // and iterators.
        -:  175:
        -:  176:  /**
        -:  177:   *  struct _Hashtable_traits
        -:  178:   *
        -:  179:   *  Important traits for hash tables.
        -:  180:   *
        -:  181:   *  @tparam _Cache_hash_code  Boolean value. True if the value of
        -:  182:   *  the hash function is stored along with the value. This is a
        -:  183:   *  time-space tradeoff.  Storing it may improve lookup speed by
        -:  184:   *  reducing the number of times we need to call the _Hash or _Equal
        -:  185:   *  functors.
        -:  186:   *
        -:  187:   *  @tparam _Constant_iterators  Boolean value. True if iterator and
        -:  188:   *  const_iterator are both constant iterator types. This is true
        -:  189:   *  for unordered_set and unordered_multiset, false for
        -:  190:   *  unordered_map and unordered_multimap.
        -:  191:   *
        -:  192:   *  @tparam _Unique_keys  Boolean value. True if the return value
        -:  193:   *  of _Hashtable::count(k) is always at most one, false if it may
        -:  194:   *  be an arbitrary number. This is true for unordered_set and
        -:  195:   *  unordered_map, false for unordered_multiset and
        -:  196:   *  unordered_multimap.
        -:  197:   */
        -:  198:  template<bool _Cache_hash_code, bool _Constant_iterators, bool _Unique_keys>
        -:  199:    struct _Hashtable_traits
        -:  200:    {
        -:  201:      using __hash_cached = __bool_constant<_Cache_hash_code>;
        -:  202:      using __constant_iterators = __bool_constant<_Constant_iterators>;
        -:  203:      using __unique_keys = __bool_constant<_Unique_keys>;
        -:  204:    };
        -:  205:
        -:  206:  /**
        -:  207:   *  struct _Hash_node_base
        -:  208:   *
        -:  209:   *  Nodes, used to wrap elements stored in the hash table.  A policy
        -:  210:   *  template parameter of class template _Hashtable controls whether
        -:  211:   *  nodes also store a hash code. In some cases (e.g. strings) this
        -:  212:   *  may be a performance win.
        -:  213:   */
        -:  214:  struct _Hash_node_base
        -:  215:  {
        -:  216:    _Hash_node_base* _M_nxt;
        -:  217:
   994351:  218:    _Hash_node_base() noexcept : _M_nxt() { }
------------------
_ZNSt8__detail15_Hash_node_baseC1Ev:
function _ZNSt8__detail15_Hash_node_baseC1Ev called 201018 returned 100% blocks executed 100%
   201018:  218:    _Hash_node_base() noexcept : _M_nxt() { }
------------------
_ZNSt8__detail15_Hash_node_baseC2Ev:
function _ZNSt8__detail15_Hash_node_baseC2Ev called 793333 returned 100% blocks executed 100%
   793333:  218:    _Hash_node_base() noexcept : _M_nxt() { }
------------------
        -:  219:
        -:  220:    _Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) { }
        -:  221:  };
        -:  222:
        -:  223:  /**
        -:  224:   *  struct _Hash_node_value_base
        -:  225:   *
        -:  226:   *  Node type with the value to store.
        -:  227:   */
        -:  228:  template<typename _Value>
        -:  229:    struct _Hash_node_value_base
        -:  230:    {
        -:  231:      typedef _Value value_type;
        -:  232:
        -:  233:      __gnu_cxx::__aligned_buffer<_Value> _M_storage;
        -:  234:
        -:  235:      _Value*
  5422324:  236:      _M_valptr() noexcept
  5422324:  237:      { return _M_storage._M_ptr(); }
------------------
_ZNSt8__detail21_Hash_node_value_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9_M_valptrEv:
function _ZNSt8__detail21_Hash_node_value_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9_M_valptrEv called 2558 returned 100% blocks executed 100%
     2558:  236:      _M_valptr() noexcept
     2558:  237:      { return _M_storage._M_ptr(); }
     2558:  237-block  0
call    0 returned 2558
------------------
_ZNSt8__detail21_Hash_node_value_baseIjE9_M_valptrEv:
function _ZNSt8__detail21_Hash_node_value_baseIjE9_M_valptrEv called 30 returned 100% blocks executed 100%
       30:  236:      _M_valptr() noexcept
       30:  237:      { return _M_storage._M_ptr(); }
       30:  237-block  0
call    0 returned 30
------------------
_ZNSt8__detail21_Hash_node_value_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdEE9_M_valptrEv:
function _ZNSt8__detail21_Hash_node_value_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdEE9_M_valptrEv called 781700 returned 100% blocks executed 100%
   781700:  236:      _M_valptr() noexcept
   781700:  237:      { return _M_storage._M_ptr(); }
   781700:  237-block  0
call    0 returned 781700
------------------
_ZNSt8__detail21_Hash_node_value_baseISt4pairIKjdEE9_M_valptrEv:
function _ZNSt8__detail21_Hash_node_value_baseISt4pairIKjdEE9_M_valptrEv called 1576068 returned 100% blocks executed 100%
  1576068:  236:      _M_valptr() noexcept
  1576068:  237:      { return _M_storage._M_ptr(); }
  1576068:  237-block  0
call    0 returned 1576068
------------------
_ZNSt8__detail21_Hash_node_value_baseISt4pairIKjPN8cppjieba8TrieNodeEEE9_M_valptrEv:
function _ZNSt8__detail21_Hash_node_value_baseISt4pairIKjPN8cppjieba8TrieNodeEEE9_M_valptrEv called 3061968 returned 100% blocks executed 100%
  3061968:  236:      _M_valptr() noexcept
  3061968:  237:      { return _M_storage._M_ptr(); }
  3061968:  237-block  0
call    0 returned 3061968
------------------
        -:  238:
        -:  239:      const _Value*
  5279214:  240:      _M_valptr() const noexcept
  5279214:  241:      { return _M_storage._M_ptr(); }
------------------
_ZNKSt8__detail21_Hash_node_value_baseIjE9_M_valptrEv:
function _ZNKSt8__detail21_Hash_node_value_baseIjE9_M_valptrEv called 346100 returned 100% blocks executed 100%
   346100:  240:      _M_valptr() const noexcept
   346100:  241:      { return _M_storage._M_ptr(); }
   346100:  241-block  0
call    0 returned 346100
------------------
_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdEE9_M_valptrEv:
function _ZNKSt8__detail21_Hash_node_value_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdEE9_M_valptrEv called 5222 returned 100% blocks executed 100%
     5222:  240:      _M_valptr() const noexcept
     5222:  241:      { return _M_storage._M_ptr(); }
     5222:  241-block  0
call    0 returned 5222
------------------
_ZNKSt8__detail21_Hash_node_value_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9_M_valptrEv:
function _ZNKSt8__detail21_Hash_node_value_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9_M_valptrEv called 7803 returned 100% blocks executed 100%
     7803:  240:      _M_valptr() const noexcept
     7803:  241:      { return _M_storage._M_ptr(); }
     7803:  241-block  0
call    0 returned 7803
------------------
_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKjdEE9_M_valptrEv:
function _ZNKSt8__detail21_Hash_node_value_baseISt4pairIKjdEE9_M_valptrEv called 1685595 returned 100% blocks executed 100%
  1685595:  240:      _M_valptr() const noexcept
  1685595:  241:      { return _M_storage._M_ptr(); }
  1685595:  241-block  0
call    0 returned 1685595
------------------
_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKjPN8cppjieba8TrieNodeEEE9_M_valptrEv:
function _ZNKSt8__detail21_Hash_node_value_baseISt4pairIKjPN8cppjieba8TrieNodeEEE9_M_valptrEv called 3234494 returned 100% blocks executed 100%
  3234494:  240:      _M_valptr() const noexcept
  3234494:  241:      { return _M_storage._M_ptr(); }
  3234494:  241-block  0
call    0 returned 3234494
------------------
        -:  242:
        -:  243:      _Value&
  497989*:  244:      _M_v() noexcept
  497989*:  245:      { return *_M_valptr(); }
------------------
_ZNSt8__detail21_Hash_node_value_baseISt4pairIKjPN8cppjieba8TrieNodeEEE4_M_vEv:
function _ZNSt8__detail21_Hash_node_value_baseISt4pairIKjPN8cppjieba8TrieNodeEEE4_M_vEv called 497989 returned 100% blocks executed 100%
   497989:  244:      _M_v() noexcept
   497989:  245:      { return *_M_valptr(); }
   497989:  245-block  0
call    0 returned 497989
------------------
_ZNSt8__detail21_Hash_node_value_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdEE4_M_vEv:
function _ZNSt8__detail21_Hash_node_value_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdEE4_M_vEv called 0 returned 0% blocks executed 0%
    #####:  244:      _M_v() noexcept
    #####:  245:      { return *_M_valptr(); }
    %%%%%:  245-block  0
call    0 never executed
------------------
_ZNSt8__detail21_Hash_node_value_baseISt4pairIKjdEE4_M_vEv:
function _ZNSt8__detail21_Hash_node_value_baseISt4pairIKjdEE4_M_vEv called 0 returned 0% blocks executed 0%
    #####:  244:      _M_v() noexcept
    #####:  245:      { return *_M_valptr(); }
    %%%%%:  245-block  0
call    0 never executed
------------------
        -:  246:
        -:  247:      const _Value&
  5279214:  248:      _M_v() const noexcept
  5279214:  249:      { return *_M_valptr(); }
------------------
_ZNKSt8__detail21_Hash_node_value_baseIjE4_M_vEv:
function _ZNKSt8__detail21_Hash_node_value_baseIjE4_M_vEv called 346100 returned 100% blocks executed 100%
   346100:  248:      _M_v() const noexcept
   346100:  249:      { return *_M_valptr(); }
   346100:  249-block  0
call    0 returned 346100
------------------
_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdEE4_M_vEv:
function _ZNKSt8__detail21_Hash_node_value_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdEE4_M_vEv called 5222 returned 100% blocks executed 100%
     5222:  248:      _M_v() const noexcept
     5222:  249:      { return *_M_valptr(); }
     5222:  249-block  0
call    0 returned 5222
------------------
_ZNKSt8__detail21_Hash_node_value_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_M_vEv:
function _ZNKSt8__detail21_Hash_node_value_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE4_M_vEv called 7803 returned 100% blocks executed 100%
     7803:  248:      _M_v() const noexcept
     7803:  249:      { return *_M_valptr(); }
     7803:  249-block  0
call    0 returned 7803
------------------
_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKjdEE4_M_vEv:
function _ZNKSt8__detail21_Hash_node_value_baseISt4pairIKjdEE4_M_vEv called 1685595 returned 100% blocks executed 100%
  1685595:  248:      _M_v() const noexcept
  1685595:  249:      { return *_M_valptr(); }
  1685595:  249-block  0
call    0 returned 1685595
------------------
_ZNKSt8__detail21_Hash_node_value_baseISt4pairIKjPN8cppjieba8TrieNodeEEE4_M_vEv:
function _ZNKSt8__detail21_Hash_node_value_baseISt4pairIKjPN8cppjieba8TrieNodeEEE4_M_vEv called 3234494 returned 100% blocks executed 100%
  3234494:  248:      _M_v() const noexcept
  3234494:  249:      { return *_M_valptr(); }
  3234494:  249-block  0
call    0 returned 3234494
------------------
        -:  250:    };
        -:  251:
        -:  252:  /**
        -:  253:   *  Primary template struct _Hash_node_code_cache.
        -:  254:   */
        -:  255:  template<bool _Cache_hash_code>
        -:  256:    struct _Hash_node_code_cache
        -:  257:    { };
        -:  258:
        -:  259:  /**
        -:  260:   *  Specialization for node with cache, struct _Hash_node_code_cache.
        -:  261:   */
        -:  262:  template<>
        -:  263:    struct _Hash_node_code_cache<true>
        -:  264:    { std::size_t  _M_hash_code; };
        -:  265:
        -:  266:  template<typename _Value, bool _Cache_hash_code>
        -:  267:    struct _Hash_node_value
        -:  268:    : _Hash_node_value_base<_Value>
        -:  269:    , _Hash_node_code_cache<_Cache_hash_code>
        -:  270:    { };
        -:  271:
        -:  272:  /**
        -:  273:   *  Primary template struct _Hash_node.
        -:  274:   */
        -:  275:  template<typename _Value, bool _Cache_hash_code>
        -:  276:    struct _Hash_node
        -:  277:    : _Hash_node_base
        -:  278:    , _Hash_node_value<_Value, _Cache_hash_code>
        -:  279:    {
        -:  280:      _Hash_node*
  3986653:  281:      _M_next() const noexcept
  3986653:  282:      { return static_cast<_Hash_node*>(this->_M_nxt); }
------------------
_ZNKSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EE7_M_nextEv:
function _ZNKSt8__detail10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EE7_M_nextEv called 95118 returned 100% blocks executed 100%
    95118:  281:      _M_next() const noexcept
    95118:  282:      { return static_cast<_Hash_node*>(this->_M_nxt); }
    95118:  282-block  0
------------------
_ZNKSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EE7_M_nextEv:
function _ZNKSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EE7_M_nextEv called 967968 returned 100% blocks executed 100%
   967968:  281:      _M_next() const noexcept
   967968:  282:      { return static_cast<_Hash_node*>(this->_M_nxt); }
   967968:  282-block  0
------------------
_ZNKSt8__detail10_Hash_nodeISt4pairIKjdELb0EE7_M_nextEv:
function _ZNKSt8__detail10_Hash_nodeISt4pairIKjdELb0EE7_M_nextEv called 206039 returned 100% blocks executed 100%
   206039:  281:      _M_next() const noexcept
   206039:  282:      { return static_cast<_Hash_node*>(this->_M_nxt); }
   206039:  282-block  0
------------------
_ZNKSt8__detail10_Hash_nodeIjLb0EE7_M_nextEv:
function _ZNKSt8__detail10_Hash_nodeIjLb0EE7_M_nextEv called 168836 returned 100% blocks executed 100%
   168836:  281:      _M_next() const noexcept
   168836:  282:      { return static_cast<_Hash_node*>(this->_M_nxt); }
   168836:  282-block  0
------------------
_ZNKSt8__detail10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EE7_M_nextEv:
function _ZNKSt8__detail10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EE7_M_nextEv called 2548692 returned 100% blocks executed 100%
  2548692:  281:      _M_next() const noexcept
  2548692:  282:      { return static_cast<_Hash_node*>(this->_M_nxt); }
  2548692:  282-block  0
------------------
        -:  283:    };
        -:  284:
        -:  285:  /// Base class for node iterators.
        -:  286:  template<typename _Value, bool _Cache_hash_code>
        -:  287:    struct _Node_iterator_base
        -:  288:    {
        -:  289:      using __node_type = _Hash_node<_Value, _Cache_hash_code>;
        -:  290:
        -:  291:      __node_type* _M_cur;
        -:  292:
function _ZNSt8__detail19_Node_iterator_baseISt4pairIKjPN8cppjieba8TrieNodeEELb0EEC2Ev called 363918 returned 100% blocks executed 100%
   363918:  293:      _Node_iterator_base() : _M_cur(nullptr) { }
 12685956:  294:      _Node_iterator_base(__node_type* __p) noexcept
 12685956:  295:      : _M_cur(__p) { }
------------------
_ZNSt8__detail19_Node_iterator_baseIjLb0EEC2EPNS_10_Hash_nodeIjLb0EEE:
function _ZNSt8__detail19_Node_iterator_baseIjLb0EEC2EPNS_10_Hash_nodeIjLb0EEE called 1738191 returned 100% blocks executed 100%
  1738191:  294:      _Node_iterator_base(__node_type* __p) noexcept
  1738191:  295:      : _M_cur(__p) { }
------------------
_ZNSt8__detail19_Node_iterator_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEC2EPNS_10_Hash_nodeIS9_Lb1EEE:
function _ZNSt8__detail19_Node_iterator_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEC2EPNS_10_Hash_nodeIS9_Lb1EEE called 270302 returned 100% blocks executed 100%
   270302:  294:      _Node_iterator_base(__node_type* __p) noexcept
   270302:  295:      : _M_cur(__p) { }
------------------
_ZNSt8__detail19_Node_iterator_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEC2EPNS_10_Hash_nodeIS6_Lb1EEE:
function _ZNSt8__detail19_Node_iterator_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEC2EPNS_10_Hash_nodeIS6_Lb1EEE called 207970 returned 100% blocks executed 100%
   207970:  294:      _Node_iterator_base(__node_type* __p) noexcept
   207970:  295:      : _M_cur(__p) { }
------------------
_ZNSt8__detail19_Node_iterator_baseISt4pairIKjdELb0EEC2EPNS_10_Hash_nodeIS3_Lb0EEE:
function _ZNSt8__detail19_Node_iterator_baseISt4pairIKjdELb0EEC2EPNS_10_Hash_nodeIS3_Lb0EEE called 3082536 returned 100% blocks executed 100%
  3082536:  294:      _Node_iterator_base(__node_type* __p) noexcept
  3082536:  295:      : _M_cur(__p) { }
------------------
_ZNSt8__detail19_Node_iterator_baseISt4pairIKjPN8cppjieba8TrieNodeEELb0EEC2EPNS_10_Hash_nodeIS6_Lb0EEE:
function _ZNSt8__detail19_Node_iterator_baseISt4pairIKjPN8cppjieba8TrieNodeEELb0EEC2EPNS_10_Hash_nodeIS6_Lb0EEE called 7386957 returned 100% blocks executed 100%
  7386957:  294:      _Node_iterator_base(__node_type* __p) noexcept
  7386957:  295:      : _M_cur(__p) { }
------------------
        -:  296:
        -:  297:      void
function _ZNSt8__detail19_Node_iterator_baseISt4pairIKjPN8cppjieba8TrieNodeEELb0EE7_M_incrEv called 497989 returned 100% blocks executed 100%
   497989:  298:      _M_incr() noexcept
   497989:  299:      { _M_cur = _M_cur->_M_next(); }
   497989:  299-block  0
call    0 returned 497989
        -:  300:
        -:  301:      friend bool
  3067489:  302:      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
        -:  303:      noexcept
  3067489:  304:      { return __x._M_cur == __y._M_cur; }
------------------
_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKjdELb0EEES6_:
function _ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKjdELb0EEES6_ called 1523656 returned 100% blocks executed 100%
  1523656:  302:      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
        -:  303:      noexcept
  1523656:  304:      { return __x._M_cur == __y._M_cur; }
  1523656:  304-block  0
------------------
_ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKjPN8cppjieba8TrieNodeEELb0EEES9_:
function _ZNSt8__detaileqERKNS_19_Node_iterator_baseISt4pairIKjPN8cppjieba8TrieNodeEELb0EEES9_ called 1543833 returned 100% blocks executed 100%
  1543833:  302:      operator==(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
        -:  303:      noexcept
  1543833:  304:      { return __x._M_cur == __y._M_cur; }
  1543833:  304-block  0
------------------
        -:  305:
        -:  306:#if __cpp_impl_three_way_comparison < 201907L
        -:  307:      friend bool
  2129529:  308:      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
        -:  309:      noexcept
  2129529:  310:      { return __x._M_cur != __y._M_cur; }
------------------
_ZNSt8__detailneERKNS_19_Node_iterator_baseIjLb0EEES3_:
function _ZNSt8__detailneERKNS_19_Node_iterator_baseIjLb0EEES3_ called 869088 returned 100% blocks executed 100%
   869088:  308:      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
        -:  309:      noexcept
   869088:  310:      { return __x._M_cur != __y._M_cur; }
   869088:  310-block  0
------------------
_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEESC_:
function _ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEESC_ called 5738 returned 100% blocks executed 100%
     5738:  308:      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
        -:  309:      noexcept
     5738:  310:      { return __x._M_cur != __y._M_cur; }
     5738:  310-block  0
------------------
_ZNSt8__detailneERKNS_19_Node_iterator_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEES9_:
function _ZNSt8__detailneERKNS_19_Node_iterator_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEES9_ called 103218 returned 100% blocks executed 100%
   103218:  308:      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
        -:  309:      noexcept
   103218:  310:      { return __x._M_cur != __y._M_cur; }
   103218:  310-block  0
------------------
_ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKjPN8cppjieba8TrieNodeEELb0EEES9_:
function _ZNSt8__detailneERKNS_19_Node_iterator_baseISt4pairIKjPN8cppjieba8TrieNodeEELb0EEES9_ called 1151485 returned 100% blocks executed 100%
  1151485:  308:      operator!=(const _Node_iterator_base& __x, const _Node_iterator_base& __y)
        -:  309:      noexcept
  1151485:  310:      { return __x._M_cur != __y._M_cur; }
  1151485:  310-block  0
------------------
        -:  311:#endif
        -:  312:    };
        -:  313:
        -:  314:  /// Node iterators, used to iterate through all the hashtable.
        -:  315:  template<typename _Value, bool __constant_iterators, bool __cache>
        -:  316:    struct _Node_iterator
        -:  317:    : public _Node_iterator_base<_Value, __cache>
        -:  318:    {
        -:  319:    private:
        -:  320:      using __base_type = _Node_iterator_base<_Value, __cache>;
        -:  321:      using __node_type = typename __base_type::__node_type;
        -:  322:
        -:  323:    public:
        -:  324:      typedef _Value					value_type;
        -:  325:      typedef std::ptrdiff_t				difference_type;
        -:  326:      typedef std::forward_iterator_tag			iterator_category;
        -:  327:
        -:  328:      using pointer = typename std::conditional<__constant_iterators,
        -:  329:				  const value_type*, value_type*>::type;
        -:  330:
        -:  331:      using reference = typename std::conditional<__constant_iterators,
        -:  332:				  const value_type&, value_type&>::type;
        -:  333:
        -:  334:      _Node_iterator() = default;
        -:  335:
        -:  336:      explicit
  5686235:  337:      _Node_iterator(__node_type* __p) noexcept
  5686235:  338:      : __base_type(__p) { }
------------------
_ZNSt8__detail14_Node_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1ELb1EEC1EPNS_10_Hash_nodeIS6_Lb1EEE:
function _ZNSt8__detail14_Node_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1ELb1EEC1EPNS_10_Hash_nodeIS6_Lb1EEE called 1534 returned 100% blocks executed 100%
     1534:  337:      _Node_iterator(__node_type* __p) noexcept
     1534:  338:      : __base_type(__p) { }
     1534:  338-block  0
call    0 returned 1534
------------------
_ZNSt8__detail14_Node_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb0ELb1EEC1EPNS_10_Hash_nodeIS9_Lb1EEE:
function _ZNSt8__detail14_Node_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb0ELb1EEC1EPNS_10_Hash_nodeIS9_Lb1EEE called 258826 returned 100% blocks executed 100%
   258826:  337:      _Node_iterator(__node_type* __p) noexcept
   258826:  338:      : __base_type(__p) { }
   258826:  338-block  0
call    0 returned 258826
------------------
_ZNSt8__detail14_Node_iteratorISt4pairIKjdELb0ELb0EEC1EPNS_10_Hash_nodeIS3_Lb0EEE:
function _ZNSt8__detail14_Node_iteratorISt4pairIKjdELb0ELb0EEC1EPNS_10_Hash_nodeIS3_Lb0EEE called 35224 returned 100% blocks executed 100%
    35224:  337:      _Node_iterator(__node_type* __p) noexcept
    35224:  338:      : __base_type(__p) { }
    35224:  338-block  0
call    0 returned 35224
------------------
_ZNSt8__detail14_Node_iteratorIjLb1ELb0EEC1EPNS_10_Hash_nodeIjLb0EEE:
function _ZNSt8__detail14_Node_iteratorIjLb1ELb0EEC1EPNS_10_Hash_nodeIjLb0EEE called 15 returned 100% blocks executed 100%
       15:  337:      _Node_iterator(__node_type* __p) noexcept
       15:  338:      : __base_type(__p) { }
       15:  338-block  0
call    0 returned 15
------------------
_ZNSt8__detail14_Node_iteratorISt4pairIKjPN8cppjieba8TrieNodeEELb0ELb0EEC1EPNS_10_Hash_nodeIS6_Lb0EEE:
function _ZNSt8__detail14_Node_iteratorISt4pairIKjPN8cppjieba8TrieNodeEELb0ELb0EEC1EPNS_10_Hash_nodeIS6_Lb0EEE called 5390636 returned 100% blocks executed 100%
  5390636:  337:      _Node_iterator(__node_type* __p) noexcept
  5390636:  338:      : __base_type(__p) { }
  5390636:  338-block  0
call    0 returned 5390636
------------------
        -:  339:
        -:  340:      reference
        -:  341:      operator*() const noexcept
        -:  342:      { return this->_M_cur->_M_v(); }
        -:  343:
        -:  344:      pointer
   792039:  345:      operator->() const noexcept
   792039:  346:      { return this->_M_cur->_M_valptr(); }
------------------
_ZNKSt8__detail14_Node_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb0ELb1EEptEv:
function _ZNKSt8__detail14_Node_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb0ELb1EEptEv called 258826 returned 100% blocks executed 100%
   258826:  345:      operator->() const noexcept
   258826:  346:      { return this->_M_cur->_M_valptr(); }
   258826:  346-block  0
call    0 returned 258826
------------------
_ZNKSt8__detail14_Node_iteratorISt4pairIKjdELb0ELb0EEptEv:
function _ZNKSt8__detail14_Node_iteratorISt4pairIKjdELb0ELb0EEptEv called 35224 returned 100% blocks executed 100%
    35224:  345:      operator->() const noexcept
    35224:  346:      { return this->_M_cur->_M_valptr(); }
    35224:  346-block  0
call    0 returned 35224
------------------
_ZNKSt8__detail14_Node_iteratorISt4pairIKjPN8cppjieba8TrieNodeEELb0ELb0EEptEv:
function _ZNKSt8__detail14_Node_iteratorISt4pairIKjPN8cppjieba8TrieNodeEELb0ELb0EEptEv called 497989 returned 100% blocks executed 100%
   497989:  345:      operator->() const noexcept
   497989:  346:      { return this->_M_cur->_M_valptr(); }
   497989:  346-block  0
call    0 returned 497989
------------------
        -:  347:
        -:  348:      _Node_iterator&
function _ZNSt8__detail14_Node_iteratorISt4pairIKjPN8cppjieba8TrieNodeEELb0ELb0EEppEv called 497989 returned 100% blocks executed 100%
   497989:  349:      operator++() noexcept
        -:  350:      {
   497989:  351:	this->_M_incr();
   497989:  351-block  0
call    0 returned 497989
   497989:  352:	return *this;
        -:  353:      }
        -:  354:
        -:  355:      _Node_iterator
        -:  356:      operator++(int) noexcept
        -:  357:      {
        -:  358:	_Node_iterator __tmp(*this);
        -:  359:	this->_M_incr();
        -:  360:	return __tmp;
        -:  361:      }
        -:  362:    };
        -:  363:
        -:  364:  /// Node const_iterators, used to iterate through all the hashtable.
        -:  365:  template<typename _Value, bool __constant_iterators, bool __cache>
        -:  366:    struct _Node_const_iterator
        -:  367:    : public _Node_iterator_base<_Value, __cache>
        -:  368:    {
        -:  369:    private:
        -:  370:      using __base_type = _Node_iterator_base<_Value, __cache>;
        -:  371:      using __node_type = typename __base_type::__node_type;
        -:  372:
        -:  373:    public:
        -:  374:      typedef _Value					value_type;
        -:  375:      typedef std::ptrdiff_t				difference_type;
        -:  376:      typedef std::forward_iterator_tag			iterator_category;
        -:  377:
        -:  378:      typedef const value_type*				pointer;
        -:  379:      typedef const value_type&				reference;
        -:  380:
function _ZNSt8__detail20_Node_const_iteratorISt4pairIKjPN8cppjieba8TrieNodeEELb0ELb0EEC1Ev called 363918 returned 100% blocks executed 100%
   363918:  381:      _Node_const_iterator() = default;
   363918:  381-block  0
call    0 returned 363918
        -:  382:
        -:  383:      explicit
  5003400:  384:      _Node_const_iterator(__node_type* __p) noexcept
  5003400:  385:      : __base_type(__p) { }
------------------
_ZNSt8__detail20_Node_const_iteratorIjLb1ELb0EEC1EPNS_10_Hash_nodeIjLb0EEE:
function _ZNSt8__detail20_Node_const_iteratorIjLb1ELb0EEC1EPNS_10_Hash_nodeIjLb0EEE called 1738176 returned 100% blocks executed 100%
  1738176:  384:      _Node_const_iterator(__node_type* __p) noexcept
  1738176:  385:      : __base_type(__p) { }
  1738176:  385-block  0
call    0 returned 1738176
------------------
_ZNSt8__detail20_Node_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb0ELb1EEC1EPNS_10_Hash_nodeIS9_Lb1EEE:
function _ZNSt8__detail20_Node_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb0ELb1EEC1EPNS_10_Hash_nodeIS9_Lb1EEE called 11476 returned 100% blocks executed 100%
    11476:  384:      _Node_const_iterator(__node_type* __p) noexcept
    11476:  385:      : __base_type(__p) { }
    11476:  385-block  0
call    0 returned 11476
------------------
_ZNSt8__detail20_Node_const_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1ELb1EEC1EPNS_10_Hash_nodeIS6_Lb1EEE:
function _ZNSt8__detail20_Node_const_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1ELb1EEC1EPNS_10_Hash_nodeIS6_Lb1EEE called 206436 returned 100% blocks executed 100%
   206436:  384:      _Node_const_iterator(__node_type* __p) noexcept
   206436:  385:      : __base_type(__p) { }
   206436:  385-block  0
call    0 returned 206436
------------------
_ZNSt8__detail20_Node_const_iteratorISt4pairIKjdELb0ELb0EEC1EPNS_10_Hash_nodeIS3_Lb0EEE:
function _ZNSt8__detail20_Node_const_iteratorISt4pairIKjdELb0ELb0EEC1EPNS_10_Hash_nodeIS3_Lb0EEE called 3047312 returned 100% blocks executed 100%
  3047312:  384:      _Node_const_iterator(__node_type* __p) noexcept
  3047312:  385:      : __base_type(__p) { }
  3047312:  385-block  0
call    0 returned 3047312
------------------
        -:  386:
function _ZNSt8__detail20_Node_const_iteratorISt4pairIKjPN8cppjieba8TrieNodeEELb0ELb0EEC1ERKNS_14_Node_iteratorIS6_Lb0ELb0EEE called 1996321 returned 100% blocks executed 100%
  1996321:  387:      _Node_const_iterator(const _Node_iterator<_Value, __constant_iterators,
        -:  388:			   __cache>& __x) noexcept
  1996321:  389:      : __base_type(__x._M_cur) { }
  1996321:  389-block  0
call    0 returned 1996321
        -:  390:
        -:  391:      reference
        -:  392:      operator*() const noexcept
        -:  393:      { return this->_M_cur->_M_v(); }
        -:  394:
        -:  395:      pointer
  2545630:  396:      operator->() const noexcept
  2545630:  397:      { return this->_M_cur->_M_valptr(); }
------------------
_ZNKSt8__detail20_Node_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb0ELb1EEptEv:
function _ZNKSt8__detail20_Node_const_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb0ELb1EEptEv called 5222 returned 100% blocks executed 100%
     5222:  396:      operator->() const noexcept
     5222:  397:      { return this->_M_cur->_M_valptr(); }
     5222:  397-block  0
call    0 returned 5222
------------------
_ZNKSt8__detail20_Node_const_iteratorISt4pairIKjdELb0ELb0EEptEv:
function _ZNKSt8__detail20_Node_const_iteratorISt4pairIKjdELb0ELb0EEptEv called 1470396 returned 100% blocks executed 100%
  1470396:  396:      operator->() const noexcept
  1470396:  397:      { return this->_M_cur->_M_valptr(); }
  1470396:  397-block  0
call    0 returned 1470396
------------------
_ZNKSt8__detail20_Node_const_iteratorISt4pairIKjPN8cppjieba8TrieNodeEELb0ELb0EEptEv:
function _ZNKSt8__detail20_Node_const_iteratorISt4pairIKjPN8cppjieba8TrieNodeEELb0ELb0EEptEv called 1070012 returned 100% blocks executed 100%
  1070012:  396:      operator->() const noexcept
  1070012:  397:      { return this->_M_cur->_M_valptr(); }
  1070012:  397-block  0
call    0 returned 1070012
------------------
        -:  398:
        -:  399:      _Node_const_iterator&
        -:  400:      operator++() noexcept
        -:  401:      {
        -:  402:	this->_M_incr();
        -:  403:	return *this;
        -:  404:      }
        -:  405:
        -:  406:      _Node_const_iterator
        -:  407:      operator++(int) noexcept
        -:  408:      {
        -:  409:	_Node_const_iterator __tmp(*this);
        -:  410:	this->_M_incr();
        -:  411:	return __tmp;
        -:  412:      }
        -:  413:    };
        -:  414:
        -:  415:  // Many of class template _Hashtable's template parameters are policy
        -:  416:  // classes.  These are defaults for the policies.
        -:  417:
        -:  418:  /// Default range hashing function: use division to fold a large number
        -:  419:  /// into the range [0, N).
        -:  420:  struct _Mod_range_hashing
        -:  421:  {
        -:  422:    typedef std::size_t first_argument_type;
        -:  423:    typedef std::size_t second_argument_type;
        -:  424:    typedef std::size_t result_type;
        -:  425:
        -:  426:    result_type
function _ZNKSt8__detail18_Mod_range_hashingclEyy called 7794665 returned 100% blocks executed 100%
  7794665:  427:    operator()(first_argument_type __num,
        -:  428:	       second_argument_type __den) const noexcept
  7794665:  429:    { return __num % __den; }
  7794665:  429-block  0
        -:  430:  };
        -:  431:
        -:  432:  /// Default ranged hash function H.  In principle it should be a
        -:  433:  /// function object composed from objects of type H1 and H2 such that
        -:  434:  /// h(k, N) = h2(h1(k), N), but that would mean making extra copies of
        -:  435:  /// h1 and h2.  So instead we'll just use a tag to tell class template
        -:  436:  /// hashtable to do that composition.
        -:  437:  struct _Default_ranged_hash { };
        -:  438:
        -:  439:  /// Default value for rehash policy.  Bucket size is (usually) the
        -:  440:  /// smallest prime that keeps the load factor small enough.
        -:  441:  struct _Prime_rehash_policy
        -:  442:  {
        -:  443:    using __has_load_factor = true_type;
        -:  444:
function _ZNSt8__detail20_Prime_rehash_policyC1Ef called 201018 returned 100% blocks executed 100%
   201018:  445:    _Prime_rehash_policy(float __z = 1.0) noexcept
   201018:  446:    : _M_max_load_factor(__z), _M_next_resize(0) { }
        -:  447:
        -:  448:    float
        -:  449:    max_load_factor() const noexcept
        -:  450:    { return _M_max_load_factor; }
        -:  451:
        -:  452:    // Return a bucket size no smaller than n.
        -:  453:    std::size_t
        -:  454:    _M_next_bkt(std::size_t __n) const;
        -:  455:
        -:  456:    // Return a bucket count appropriate for n elements
        -:  457:    std::size_t
        -:  458:    _M_bkt_for_elements(std::size_t __n) const
        -:  459:    { return __builtin_ceil(__n / (double)_M_max_load_factor); }
        -:  460:
        -:  461:    // __n_bkt is current bucket count, __n_elt is current element count,
        -:  462:    // and __n_ins is number of elements to be inserted.  Do we need to
        -:  463:    // increase bucket count?  If so, return make_pair(true, n), where n
        -:  464:    // is the new bucket count.  If not, return make_pair(false, 0).
        -:  465:    std::pair<bool, std::size_t>
        -:  466:    _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,
        -:  467:		   std::size_t __n_ins) const;
        -:  468:
        -:  469:    typedef std::size_t _State;
        -:  470:
        -:  471:    _State
function _ZNKSt8__detail20_Prime_rehash_policy8_M_stateEv called 793333 returned 100% blocks executed 100%
   793333:  472:    _M_state() const
   793333:  473:    { return _M_next_resize; }
   793333:  473-block  0
        -:  474:
        -:  475:    void
        -:  476:    _M_reset() noexcept
        -:  477:    { _M_next_resize = 0; }
        -:  478:
        -:  479:    void
function _ZNSt8__detail20_Prime_rehash_policy8_M_resetEy called 0 returned 0% blocks executed 0%
    #####:  480:    _M_reset(_State __state)
    #####:  481:    { _M_next_resize = __state; }
        -:  482:
        -:  483:    static const std::size_t _S_growth_factor = 2;
        -:  484:
        -:  485:    float		_M_max_load_factor;
        -:  486:    mutable std::size_t	_M_next_resize;
        -:  487:  };
        -:  488:
        -:  489:  /// Range hashing function assuming that second arg is a power of 2.
        -:  490:  struct _Mask_range_hashing
        -:  491:  {
        -:  492:    typedef std::size_t first_argument_type;
        -:  493:    typedef std::size_t second_argument_type;
        -:  494:    typedef std::size_t result_type;
        -:  495:
        -:  496:    result_type
        -:  497:    operator()(first_argument_type __num,
        -:  498:	       second_argument_type __den) const noexcept
        -:  499:    { return __num & (__den - 1); }
        -:  500:  };
        -:  501:
        -:  502:  /// Compute closest power of 2 not less than __n
        -:  503:  inline std::size_t
        -:  504:  __clp2(std::size_t __n) noexcept
        -:  505:  {
        -:  506:    using __gnu_cxx::__int_traits;
        -:  507:    // Equivalent to return __n ? std::bit_ceil(__n) : 0;
        -:  508:    if (__n < 2)
        -:  509:      return __n;
        -:  510:    const unsigned __lz = sizeof(size_t) > sizeof(long)
        -:  511:      ? __builtin_clzll(__n - 1ull)
        -:  512:      : __builtin_clzl(__n - 1ul);
        -:  513:    // Doing two shifts avoids undefined behaviour when __lz == 0.
        -:  514:    return (size_t(1) << (__int_traits<size_t>::__digits - __lz - 1)) << 1;
        -:  515:  }
        -:  516:
        -:  517:  /// Rehash policy providing power of 2 bucket numbers. Avoids modulo
        -:  518:  /// operations.
        -:  519:  struct _Power2_rehash_policy
        -:  520:  {
        -:  521:    using __has_load_factor = true_type;
        -:  522:
        -:  523:    _Power2_rehash_policy(float __z = 1.0) noexcept
        -:  524:    : _M_max_load_factor(__z), _M_next_resize(0) { }
        -:  525:
        -:  526:    float
        -:  527:    max_load_factor() const noexcept
        -:  528:    { return _M_max_load_factor; }
        -:  529:
        -:  530:    // Return a bucket size no smaller than n (as long as n is not above the
        -:  531:    // highest power of 2).
        -:  532:    std::size_t
        -:  533:    _M_next_bkt(std::size_t __n) noexcept
        -:  534:    {
        -:  535:      if (__n == 0)
        -:  536:	// Special case on container 1st initialization with 0 bucket count
        -:  537:	// hint. We keep _M_next_resize to 0 to make sure that next time we
        -:  538:	// want to add an element allocation will take place.
        -:  539:	return 1;
        -:  540:
        -:  541:      const auto __max_width = std::min<size_t>(sizeof(size_t), 8);
        -:  542:      const auto __max_bkt = size_t(1) << (__max_width * __CHAR_BIT__ - 1);
        -:  543:      std::size_t __res = __clp2(__n);
        -:  544:
        -:  545:      if (__res == 0)
        -:  546:	__res = __max_bkt;
        -:  547:      else if (__res == 1)
        -:  548:	// If __res is 1 we force it to 2 to make sure there will be an
        -:  549:	// allocation so that nothing need to be stored in the initial
        -:  550:	// single bucket
        -:  551:	__res = 2;
        -:  552:
        -:  553:      if (__res == __max_bkt)
        -:  554:	// Set next resize to the max value so that we never try to rehash again
        -:  555:	// as we already reach the biggest possible bucket number.
        -:  556:	// Note that it might result in max_load_factor not being respected.
        -:  557:	_M_next_resize = size_t(-1);
        -:  558:      else
        -:  559:	_M_next_resize
        -:  560:	  = __builtin_floor(__res * (double)_M_max_load_factor);
        -:  561:
        -:  562:      return __res;
        -:  563:    }
        -:  564:
        -:  565:    // Return a bucket count appropriate for n elements
        -:  566:    std::size_t
        -:  567:    _M_bkt_for_elements(std::size_t __n) const noexcept
        -:  568:    { return __builtin_ceil(__n / (double)_M_max_load_factor); }
        -:  569:
        -:  570:    // __n_bkt is current bucket count, __n_elt is current element count,
        -:  571:    // and __n_ins is number of elements to be inserted.  Do we need to
        -:  572:    // increase bucket count?  If so, return make_pair(true, n), where n
        -:  573:    // is the new bucket count.  If not, return make_pair(false, 0).
        -:  574:    std::pair<bool, std::size_t>
        -:  575:    _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt,
        -:  576:		   std::size_t __n_ins) noexcept
        -:  577:    {
        -:  578:      if (__n_elt + __n_ins > _M_next_resize)
        -:  579:	{
        -:  580:	  // If _M_next_resize is 0 it means that we have nothing allocated so
        -:  581:	  // far and that we start inserting elements. In this case we start
        -:  582:	  // with an initial bucket size of 11.
        -:  583:	  double __min_bkts
        -:  584:	    = std::max<std::size_t>(__n_elt + __n_ins, _M_next_resize ? 0 : 11)
        -:  585:	      / (double)_M_max_load_factor;
        -:  586:	  if (__min_bkts >= __n_bkt)
        -:  587:	    return { true,
        -:  588:	      _M_next_bkt(std::max<std::size_t>(__builtin_floor(__min_bkts) + 1,
        -:  589:						__n_bkt * _S_growth_factor)) };
        -:  590:
        -:  591:	  _M_next_resize
        -:  592:	    = __builtin_floor(__n_bkt * (double)_M_max_load_factor);
        -:  593:	  return { false, 0 };
        -:  594:	}
        -:  595:      else
        -:  596:	return { false, 0 };
        -:  597:    }
        -:  598:
        -:  599:    typedef std::size_t _State;
        -:  600:
        -:  601:    _State
        -:  602:    _M_state() const noexcept
        -:  603:    { return _M_next_resize; }
        -:  604:
        -:  605:    void
        -:  606:    _M_reset() noexcept
        -:  607:    { _M_next_resize = 0; }
        -:  608:
        -:  609:    void
        -:  610:    _M_reset(_State __state) noexcept
        -:  611:    { _M_next_resize = __state; }
        -:  612:
        -:  613:    static const std::size_t _S_growth_factor = 2;
        -:  614:
        -:  615:    float	_M_max_load_factor;
        -:  616:    std::size_t	_M_next_resize;
        -:  617:  };
        -:  618:
        -:  619:  // Base classes for std::_Hashtable.  We define these base classes
        -:  620:  // because in some cases we want to do different things depending on
        -:  621:  // the value of a policy class.  In some cases the policy class
        -:  622:  // affects which member functions and nested typedefs are defined;
        -:  623:  // we handle that by specializing base class templates.  Several of
        -:  624:  // the base class templates need to access other members of class
        -:  625:  // template _Hashtable, so we use a variant of the "Curiously
        -:  626:  // Recurring Template Pattern" (CRTP) technique.
        -:  627:
        -:  628:  /**
        -:  629:   *  Primary class template _Map_base.
        -:  630:   *
        -:  631:   *  If the hashtable has a value type of the form pair<T1, T2> and a
        -:  632:   *  key extraction policy (_ExtractKey) that returns the first part
        -:  633:   *  of the pair, the hashtable gets a mapped_type typedef.  If it
        -:  634:   *  satisfies those criteria and also has unique keys, then it also
        -:  635:   *  gets an operator[].
        -:  636:   */
        -:  637:  template<typename _Key, typename _Value, typename _Alloc,
        -:  638:	   typename _ExtractKey, typename _Equal,
        -:  639:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  640:	   typename _RehashPolicy, typename _Traits,
        -:  641:	   bool _Unique_keys = _Traits::__unique_keys::value>
        -:  642:    struct _Map_base { };
        -:  643:
        -:  644:  /// Partial specialization, __unique_keys set to false.
        -:  645:  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
        -:  646:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  647:	   typename _RehashPolicy, typename _Traits>
        -:  648:    struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
        -:  649:		     _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, false>
        -:  650:    {
        -:  651:      using mapped_type = typename std::tuple_element<1, _Pair>::type;
        -:  652:    };
        -:  653:
        -:  654:  /// Partial specialization, __unique_keys set to true.
        -:  655:  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
        -:  656:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  657:	   typename _RehashPolicy, typename _Traits>
        -:  658:    struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
        -:  659:		     _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>
        -:  660:    {
        -:  661:    private:
        -:  662:      using __hashtable_base = _Hashtable_base<_Key, _Pair, _Select1st, _Equal,
        -:  663:					       _Hash, _RangeHash, _Unused,
        -:  664:					       _Traits>;
        -:  665:
        -:  666:      using __hashtable = _Hashtable<_Key, _Pair, _Alloc, _Select1st, _Equal,
        -:  667:				     _Hash, _RangeHash,
        -:  668:				     _Unused, _RehashPolicy, _Traits>;
        -:  669:
        -:  670:      using __hash_code = typename __hashtable_base::__hash_code;
        -:  671:
        -:  672:    public:
        -:  673:      using key_type = typename __hashtable_base::key_type;
        -:  674:      using mapped_type = typename std::tuple_element<1, _Pair>::type;
        -:  675:
        -:  676:      mapped_type&
        -:  677:      operator[](const key_type& __k);
        -:  678:
        -:  679:      mapped_type&
        -:  680:      operator[](key_type&& __k);
        -:  681:
        -:  682:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  683:      // DR 761. unordered_map needs an at() member function.
        -:  684:      mapped_type&
        -:  685:      at(const key_type& __k);
        -:  686:
        -:  687:      const mapped_type&
        -:  688:      at(const key_type& __k) const;
        -:  689:    };
        -:  690:
        -:  691:  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
        -:  692:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  693:	   typename _RehashPolicy, typename _Traits>
        -:  694:    auto
   294050:  695:    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
        -:  696:	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
        -:  697:    operator[](const key_type& __k)
        -:  698:    -> mapped_type&
        -:  699:    {
   294050:  700:      __hashtable* __h = static_cast<__hashtable*>(this);
   294050:  701:      __hash_code __code = __h->_M_hash_code(__k);
   294050:  702:      std::size_t __bkt = __h->_M_bucket_index(__code);
   294050:  703:      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
    #####:  704:	return __node->_M_v().second;
        -:  705:
   294050:  706:      typename __hashtable::_Scoped_node __node {
        -:  707:	__h,
        -:  708:	std::piecewise_construct,
   294050:  709:	std::tuple<const key_type&>(__k),
    #####:  710:	std::tuple<>()
        -:  711:      };
        -:  712:      auto __pos
   294050:  713:	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   294050:  714:      __node._M_node = nullptr;
   294050:  715:      return __pos->second;
   294050:  716:    }
------------------
_ZNSt8__detail9_Map_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dESaIS9_ENS_10_Select1stESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb1EEixERS8_:
function _ZNSt8__detail9_Map_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dESaIS9_ENS_10_Select1stESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb0ELb1EEELb1EEixERS8_ called 258826 returned 100% blocks executed 60%
   258826:  695:    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
        -:  696:	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
        -:  697:    operator[](const key_type& __k)
        -:  698:    -> mapped_type&
        -:  699:    {
   258826:  700:      __hashtable* __h = static_cast<__hashtable*>(this);
   258826:  701:      __hash_code __code = __h->_M_hash_code(__k);
   258826:  701-block  0
call    0 returned 258826
branch  1 taken 258826 (fallthrough)
branch  2 taken 0 (throw)
   258826:  702:      std::size_t __bkt = __h->_M_bucket_index(__code);
   258826:  702-block  0
call    0 returned 258826
branch  1 taken 258826 (fallthrough)
branch  2 taken 0 (throw)
   258826:  703:      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
   258826:  703-block  0
call    0 returned 258826
branch  1 taken 258826 (fallthrough)
branch  2 taken 0 (throw)
   258826:  703-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 258826
    #####:  704:	return __node->_M_v().second;
    %%%%%:  704-block  0
call    0 never executed
        -:  705:
   258826:  706:      typename __hashtable::_Scoped_node __node {
call    0 returned 258826
branch  1 taken 258826 (fallthrough)
branch  2 taken 0 (throw)
        -:  707:	__h,
        -:  708:	std::piecewise_construct,
   258826:  709:	std::tuple<const key_type&>(__k),
   258826:  709-block  0
call    0 returned 258826
    $$$$$:  709-block  1
    #####:  710:	std::tuple<>()
    $$$$$:  710-block  0
        -:  711:      };
        -:  712:      auto __pos
   258826:  713:	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
   258826:  713-block  0
call    0 returned 258826
branch  1 taken 258826 (fallthrough)
branch  2 taken 0 (throw)
   258826:  714:      __node._M_node = nullptr;
   258826:  715:      return __pos->second;
   258826:  715-block  0
call    0 returned 258826
   258826:  716:    }
call    0 returned 258826
    $$$$$:  716-block  0
call    1 never executed
------------------
_ZNSt8__detail9_Map_baseIjSt4pairIKjdESaIS3_ENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_:
function _ZNSt8__detail9_Map_baseIjSt4pairIKjdESaIS3_ENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb0ELb1EEELb1EEixERS2_ called 35224 returned 100% blocks executed 60%
    35224:  695:    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
        -:  696:	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
        -:  697:    operator[](const key_type& __k)
        -:  698:    -> mapped_type&
        -:  699:    {
    35224:  700:      __hashtable* __h = static_cast<__hashtable*>(this);
    35224:  701:      __hash_code __code = __h->_M_hash_code(__k);
    35224:  701-block  0
call    0 returned 35224
branch  1 taken 35224 (fallthrough)
branch  2 taken 0 (throw)
    35224:  702:      std::size_t __bkt = __h->_M_bucket_index(__code);
    35224:  702-block  0
call    0 returned 35224
branch  1 taken 35224 (fallthrough)
branch  2 taken 0 (throw)
    35224:  703:      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
    35224:  703-block  0
call    0 returned 35224
branch  1 taken 35224 (fallthrough)
branch  2 taken 0 (throw)
    35224:  703-block  1
branch  3 taken 0 (fallthrough)
branch  4 taken 35224
    #####:  704:	return __node->_M_v().second;
    %%%%%:  704-block  0
call    0 never executed
        -:  705:
    35224:  706:      typename __hashtable::_Scoped_node __node {
call    0 returned 35224
branch  1 taken 35224 (fallthrough)
branch  2 taken 0 (throw)
        -:  707:	__h,
        -:  708:	std::piecewise_construct,
    35224:  709:	std::tuple<const key_type&>(__k),
    35224:  709-block  0
call    0 returned 35224
    $$$$$:  709-block  1
    #####:  710:	std::tuple<>()
    $$$$$:  710-block  0
        -:  711:      };
        -:  712:      auto __pos
    35224:  713:	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
    35224:  713-block  0
call    0 returned 35224
branch  1 taken 35224 (fallthrough)
branch  2 taken 0 (throw)
    35224:  714:      __node._M_node = nullptr;
    35224:  715:      return __pos->second;
    35224:  715-block  0
call    0 returned 35224
    35224:  716:    }
call    0 returned 35224
    $$$$$:  716-block  0
call    1 never executed
------------------
        -:  717:
        -:  718:  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
        -:  719:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  720:	   typename _RehashPolicy, typename _Traits>
        -:  721:    auto
        -:  722:    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
        -:  723:	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
        -:  724:    operator[](key_type&& __k)
        -:  725:    -> mapped_type&
        -:  726:    {
        -:  727:      __hashtable* __h = static_cast<__hashtable*>(this);
        -:  728:      __hash_code __code = __h->_M_hash_code(__k);
        -:  729:      std::size_t __bkt = __h->_M_bucket_index(__code);
        -:  730:      if (auto __node = __h->_M_find_node(__bkt, __k, __code))
        -:  731:	return __node->_M_v().second;
        -:  732:
        -:  733:      typename __hashtable::_Scoped_node __node {
        -:  734:	__h,
        -:  735:	std::piecewise_construct,
        -:  736:	std::forward_as_tuple(std::move(__k)),
        -:  737:	std::tuple<>()
        -:  738:      };
        -:  739:      auto __pos
        -:  740:	= __h->_M_insert_unique_node(__bkt, __code, __node._M_node);
        -:  741:      __node._M_node = nullptr;
        -:  742:      return __pos->second;
        -:  743:    }
        -:  744:
        -:  745:  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
        -:  746:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  747:	   typename _RehashPolicy, typename _Traits>
        -:  748:    auto
        -:  749:    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
        -:  750:	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
        -:  751:    at(const key_type& __k)
        -:  752:    -> mapped_type&
        -:  753:    {
        -:  754:      __hashtable* __h = static_cast<__hashtable*>(this);
        -:  755:      auto __ite = __h->find(__k);
        -:  756:
        -:  757:      if (!__ite._M_cur)
        -:  758:	__throw_out_of_range(__N("_Map_base::at"));
        -:  759:      return __ite->second;
        -:  760:    }
        -:  761:
        -:  762:  template<typename _Key, typename _Pair, typename _Alloc, typename _Equal,
        -:  763:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  764:	   typename _RehashPolicy, typename _Traits>
        -:  765:    auto
        -:  766:    _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal,
        -:  767:	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
        -:  768:    at(const key_type& __k) const
        -:  769:    -> const mapped_type&
        -:  770:    {
        -:  771:      const __hashtable* __h = static_cast<const __hashtable*>(this);
        -:  772:      auto __ite = __h->find(__k);
        -:  773:
        -:  774:      if (!__ite._M_cur)
        -:  775:	__throw_out_of_range(__N("_Map_base::at"));
        -:  776:      return __ite->second;
        -:  777:    }
        -:  778:
        -:  779:  /**
        -:  780:   *  Primary class template _Insert_base.
        -:  781:   *
        -:  782:   *  Defines @c insert member functions appropriate to all _Hashtables.
        -:  783:   */
        -:  784:  template<typename _Key, typename _Value, typename _Alloc,
        -:  785:	   typename _ExtractKey, typename _Equal,
        -:  786:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  787:	   typename _RehashPolicy, typename _Traits>
        -:  788:    struct _Insert_base
        -:  789:    {
        -:  790:    protected:
        -:  791:      using __hashtable_base = _Hashtable_base<_Key, _Value, _ExtractKey,
        -:  792:					       _Equal, _Hash, _RangeHash,
        -:  793:					       _Unused, _Traits>;
        -:  794:
        -:  795:      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -:  796:				     _Hash, _RangeHash,
        -:  797:				     _Unused, _RehashPolicy, _Traits>;
        -:  798:
        -:  799:      using __hash_cached = typename _Traits::__hash_cached;
        -:  800:      using __constant_iterators = typename _Traits::__constant_iterators;
        -:  801:
        -:  802:      using __hashtable_alloc = _Hashtable_alloc<
        -:  803:	__alloc_rebind<_Alloc, _Hash_node<_Value,
        -:  804:					  __hash_cached::value>>>;
        -:  805:
        -:  806:      using value_type = typename __hashtable_base::value_type;
        -:  807:      using size_type = typename __hashtable_base::size_type;
        -:  808:
        -:  809:      using __unique_keys = typename _Traits::__unique_keys;
        -:  810:      using __node_alloc_type = typename __hashtable_alloc::__node_alloc_type;
        -:  811:      using __node_gen_type = _AllocNode<__node_alloc_type>;
        -:  812:
        -:  813:      __hashtable&
     1549:  814:      _M_conjure_hashtable()
     1549:  815:      { return *(static_cast<__hashtable*>(this)); }
------------------
_ZNSt8__detail12_Insert_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS6_ENS_9_IdentityESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb1ELb1EEEE20_M_conjure_hashtableEv:
function _ZNSt8__detail12_Insert_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS6_ENS_9_IdentityESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb1ELb1EEEE20_M_conjure_hashtableEv called 1534 returned 100% blocks executed 100%
     1534:  814:      _M_conjure_hashtable()
     1534:  815:      { return *(static_cast<__hashtable*>(this)); }
     1534:  815-block  0
------------------
_ZNSt8__detail12_Insert_baseIjjSaIjENS_9_IdentityESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb1ELb1EEEE20_M_conjure_hashtableEv:
function _ZNSt8__detail12_Insert_baseIjjSaIjENS_9_IdentityESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb1ELb1EEEE20_M_conjure_hashtableEv called 15 returned 100% blocks executed 100%
       15:  814:      _M_conjure_hashtable()
       15:  815:      { return *(static_cast<__hashtable*>(this)); }
       15:  815-block  0
------------------
        -:  816:
        -:  817:      template<typename _InputIterator, typename _NodeGetter>
        -:  818:	void
        -:  819:	_M_insert_range(_InputIterator __first, _InputIterator __last,
        -:  820:			const _NodeGetter&, true_type __uks);
        -:  821:
        -:  822:      template<typename _InputIterator, typename _NodeGetter>
        -:  823:	void
        -:  824:	_M_insert_range(_InputIterator __first, _InputIterator __last,
        -:  825:			const _NodeGetter&, false_type __uks);
        -:  826:
        -:  827:    public:
        -:  828:      using iterator = _Node_iterator<_Value, __constant_iterators::value,
        -:  829:				      __hash_cached::value>;
        -:  830:
        -:  831:      using const_iterator = _Node_const_iterator<_Value, __constant_iterators::value,
        -:  832:						  __hash_cached::value>;
        -:  833:
        -:  834:      using __ireturn_type = typename std::conditional<__unique_keys::value,
        -:  835:						     std::pair<iterator, bool>,
        -:  836:						     iterator>::type;
        -:  837:
        -:  838:      __ireturn_type
     1549:  839:      insert(const value_type& __v)
        -:  840:      {
     1549:  841:	__hashtable& __h = _M_conjure_hashtable();
     1549:  842:	__node_gen_type __node_gen(__h);
     3098:  843:	return __h._M_insert(__v, __node_gen, __unique_keys{});
        -:  844:      }
------------------
_ZNSt8__detail12_Insert_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS6_ENS_9_IdentityESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb1ELb1EEEE6insertERKS6_:
function _ZNSt8__detail12_Insert_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_SaIS6_ENS_9_IdentityESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb1ELb1ELb1EEEE6insertERKS6_ called 1534 returned 100% blocks executed 100%
     1534:  839:      insert(const value_type& __v)
        -:  840:      {
     1534:  841:	__hashtable& __h = _M_conjure_hashtable();
     1534:  841-block  0
call    0 returned 1534
     1534:  842:	__node_gen_type __node_gen(__h);
call    0 returned 1534
     3068:  843:	return __h._M_insert(__v, __node_gen, __unique_keys{});
call    0 returned 1534
branch  1 taken 1534 (fallthrough)
branch  2 taken 0 (throw)
     1534:  843-block  0
     1534:  843-block  1
        -:  844:      }
------------------
_ZNSt8__detail12_Insert_baseIjjSaIjENS_9_IdentityESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb1ELb1EEEE6insertERKj:
function _ZNSt8__detail12_Insert_baseIjjSaIjENS_9_IdentityESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_20_Prime_rehash_policyENS_17_Hashtable_traitsILb0ELb1ELb1EEEE6insertERKj called 15 returned 100% blocks executed 100%
       15:  839:      insert(const value_type& __v)
        -:  840:      {
       15:  841:	__hashtable& __h = _M_conjure_hashtable();
       15:  841-block  0
call    0 returned 15
       15:  842:	__node_gen_type __node_gen(__h);
call    0 returned 15
       30:  843:	return __h._M_insert(__v, __node_gen, __unique_keys{});
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15:  843-block  0
       15:  843-block  1
        -:  844:      }
------------------
        -:  845:
        -:  846:      iterator
        -:  847:      insert(const_iterator __hint, const value_type& __v)
        -:  848:      {
        -:  849:	__hashtable& __h = _M_conjure_hashtable();
        -:  850:	__node_gen_type __node_gen(__h);	
        -:  851:	return __h._M_insert(__hint, __v, __node_gen, __unique_keys{});
        -:  852:      }
        -:  853:
        -:  854:      template<typename _KType, typename... _Args>
        -:  855:	std::pair<iterator, bool>
        -:  856:	try_emplace(const_iterator, _KType&& __k, _Args&&... __args)
        -:  857:	{
        -:  858:	  __hashtable& __h = _M_conjure_hashtable();
        -:  859:	  auto __code = __h._M_hash_code(__k);
        -:  860:	  std::size_t __bkt = __h._M_bucket_index(__code);
        -:  861:	  if (auto __node = __h._M_find_node(__bkt, __k, __code))
        -:  862:	    return { iterator(__node), false };
        -:  863:
        -:  864:	  typename __hashtable::_Scoped_node __node {
        -:  865:	    &__h,
        -:  866:	    std::piecewise_construct,
        -:  867:	    std::forward_as_tuple(std::forward<_KType>(__k)),
        -:  868:	    std::forward_as_tuple(std::forward<_Args>(__args)...)
        -:  869:	    };
        -:  870:	  auto __it
        -:  871:	    = __h._M_insert_unique_node(__bkt, __code, __node._M_node);
        -:  872:	  __node._M_node = nullptr;
        -:  873:	  return { __it, true };
        -:  874:	}
        -:  875:
        -:  876:      void
        -:  877:      insert(initializer_list<value_type> __l)
        -:  878:      { this->insert(__l.begin(), __l.end()); }
        -:  879:
        -:  880:      template<typename _InputIterator>
        -:  881:	void
        -:  882:	insert(_InputIterator __first, _InputIterator __last)
        -:  883:	{
        -:  884:	  __hashtable& __h = _M_conjure_hashtable();
        -:  885:	  __node_gen_type __node_gen(__h);
        -:  886:	  return _M_insert_range(__first, __last, __node_gen, __unique_keys{});
        -:  887:	}
        -:  888:    };
        -:  889:
        -:  890:  template<typename _Key, typename _Value, typename _Alloc,
        -:  891:	   typename _ExtractKey, typename _Equal,
        -:  892:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  893:	   typename _RehashPolicy, typename _Traits>
        -:  894:    template<typename _InputIterator, typename _NodeGetter>
        -:  895:      void
        -:  896:      _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -:  897:		   _Hash, _RangeHash, _Unused,
        -:  898:		   _RehashPolicy, _Traits>::
        -:  899:      _M_insert_range(_InputIterator __first, _InputIterator __last,
        -:  900:		      const _NodeGetter& __node_gen, true_type __uks)
        -:  901:      {
        -:  902:	__hashtable& __h = _M_conjure_hashtable();
        -:  903:	for (; __first != __last; ++__first)
        -:  904:	  __h._M_insert(*__first, __node_gen, __uks);
        -:  905:      }
        -:  906:
        -:  907:  template<typename _Key, typename _Value, typename _Alloc,
        -:  908:	   typename _ExtractKey, typename _Equal,
        -:  909:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  910:	   typename _RehashPolicy, typename _Traits>
        -:  911:    template<typename _InputIterator, typename _NodeGetter>
        -:  912:      void
        -:  913:      _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -:  914:		   _Hash, _RangeHash, _Unused,
        -:  915:		   _RehashPolicy, _Traits>::
        -:  916:      _M_insert_range(_InputIterator __first, _InputIterator __last,
        -:  917:		      const _NodeGetter& __node_gen, false_type __uks)
        -:  918:      {
        -:  919:	using __rehash_type = typename __hashtable::__rehash_type;
        -:  920:	using __rehash_state = typename __hashtable::__rehash_state;
        -:  921:	using pair_type = std::pair<bool, std::size_t>;
        -:  922:
        -:  923:	size_type __n_elt = __detail::__distance_fw(__first, __last);
        -:  924:	if (__n_elt == 0)
        -:  925:	  return;
        -:  926:
        -:  927:	__hashtable& __h = _M_conjure_hashtable();
        -:  928:	__rehash_type& __rehash = __h._M_rehash_policy;
        -:  929:	const __rehash_state& __saved_state = __rehash._M_state();
        -:  930:	pair_type __do_rehash = __rehash._M_need_rehash(__h._M_bucket_count,
        -:  931:							__h._M_element_count,
        -:  932:							__n_elt);
        -:  933:
        -:  934:	if (__do_rehash.first)
        -:  935:	  __h._M_rehash(__do_rehash.second, __saved_state);
        -:  936:
        -:  937:	for (; __first != __last; ++__first)
        -:  938:	  __h._M_insert(*__first, __node_gen, __uks);
        -:  939:      }
        -:  940:
        -:  941:  /**
        -:  942:   *  Primary class template _Insert.
        -:  943:   *
        -:  944:   *  Defines @c insert member functions that depend on _Hashtable policies,
        -:  945:   *  via partial specializations.
        -:  946:   */
        -:  947:  template<typename _Key, typename _Value, typename _Alloc,
        -:  948:	   typename _ExtractKey, typename _Equal,
        -:  949:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  950:	   typename _RehashPolicy, typename _Traits,
        -:  951:	   bool _Constant_iterators = _Traits::__constant_iterators::value>
        -:  952:    struct _Insert;
        -:  953:
        -:  954:  /// Specialization.
        -:  955:  template<typename _Key, typename _Value, typename _Alloc,
        -:  956:	   typename _ExtractKey, typename _Equal,
        -:  957:	   typename _Hash, typename _RangeHash, typename _Unused,
        -:  958:	   typename _RehashPolicy, typename _Traits>
        -:  959:    struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -:  960:		   _Hash, _RangeHash, _Unused,
        -:  961:		   _RehashPolicy, _Traits, true>
        -:  962:    : public _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -:  963:			  _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>
        -:  964:    {
        -:  965:      using __base_type = _Insert_base<_Key, _Value, _Alloc, _ExtractKey,
        -:  966:				       _Equal, _Hash, _RangeHash, _Unused,
        -:  967:				       _RehashPolicy, _Traits>;
        -:  968:
        -:  969:      using value_type = typename __base_type::value_type;
        -:  970:      using iterator = typename __base_type::iterator;
        -:  971:      using const_iterator =  typename __base_type::const_iterator;
        -:  972:      using __ireturn_type = typename __base_type::__ireturn_type;
        -:  973:
        -:  974:      using __unique_keys = typename __base_type::__unique_keys;
        -:  975:      using __hashtable = typename __base_type::__hashtable;
        -:  976:      using __node_gen_type = typename __base_type::__node_gen_type;
        -:  977:
        -:  978:      using __base_type::insert;
        -:  979:
        -:  980:      __ireturn_type
        -:  981:      insert(value_type&& __v)
        -:  982:      {
        -:  983:	__hashtable& __h = this->_M_conjure_hashtable();
        -:  984:	__node_gen_type __node_gen(__h);
        -:  985:	return __h._M_insert(std::move(__v), __node_gen, __unique_keys{});
        -:  986:      }
        -:  987:
        -:  988:      iterator
        -:  989:      insert(const_iterator __hint, value_type&& __v)
        -:  990:      {
        -:  991:	__hashtable& __h = this->_M_conjure_hashtable();
        -:  992:	__node_gen_type __node_gen(__h);
        -:  993:	return __h._M_insert(__hint, std::move(__v), __node_gen,
        -:  994:			     __unique_keys{});
        -:  995:      }
        -:  996:    };
        -:  997:
        -:  998:  /// Specialization.
        -:  999:  template<typename _Key, typename _Value, typename _Alloc,
        -: 1000:	   typename _ExtractKey, typename _Equal,
        -: 1001:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1002:	   typename _RehashPolicy, typename _Traits>
        -: 1003:    struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -: 1004:		   _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, false>
        -: 1005:    : public _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -: 1006:			  _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits>
        -: 1007:    {
        -: 1008:      using __base_type = _Insert_base<_Key, _Value, _Alloc, _ExtractKey,
        -: 1009:				       _Equal, _Hash, _RangeHash, _Unused,
        -: 1010:				       _RehashPolicy, _Traits>;
        -: 1011:      using value_type = typename __base_type::value_type;
        -: 1012:      using iterator = typename __base_type::iterator;
        -: 1013:      using const_iterator =  typename __base_type::const_iterator;
        -: 1014:
        -: 1015:      using __unique_keys = typename __base_type::__unique_keys;
        -: 1016:      using __hashtable = typename __base_type::__hashtable;
        -: 1017:      using __ireturn_type = typename __base_type::__ireturn_type;
        -: 1018:
        -: 1019:      using __base_type::insert;
        -: 1020:
        -: 1021:      template<typename _Pair>
        -: 1022:	using __is_cons = std::is_constructible<value_type, _Pair&&>;
        -: 1023:
        -: 1024:      template<typename _Pair>
        -: 1025:	using _IFcons = std::enable_if<__is_cons<_Pair>::value>;
        -: 1026:
        -: 1027:      template<typename _Pair>
        -: 1028:	using _IFconsp = typename _IFcons<_Pair>::type;
        -: 1029:
        -: 1030:      template<typename _Pair, typename = _IFconsp<_Pair>>
        -: 1031:	__ireturn_type
        -: 1032:	insert(_Pair&& __v)
        -: 1033:	{
        -: 1034:	  __hashtable& __h = this->_M_conjure_hashtable();
        -: 1035:	  return __h._M_emplace(__unique_keys{}, std::forward<_Pair>(__v));
        -: 1036:	}
        -: 1037:
        -: 1038:      template<typename _Pair, typename = _IFconsp<_Pair>>
        -: 1039:	iterator
        -: 1040:	insert(const_iterator __hint, _Pair&& __v)
        -: 1041:	{
        -: 1042:	  __hashtable& __h = this->_M_conjure_hashtable();
        -: 1043:	  return __h._M_emplace(__hint, __unique_keys{},
        -: 1044:				std::forward<_Pair>(__v));
        -: 1045:	}
        -: 1046:   };
        -: 1047:
        -: 1048:  template<typename _Policy>
        -: 1049:    using __has_load_factor = typename _Policy::__has_load_factor;
        -: 1050:
        -: 1051:  /**
        -: 1052:   *  Primary class template  _Rehash_base.
        -: 1053:   *
        -: 1054:   *  Give hashtable the max_load_factor functions and reserve iff the
        -: 1055:   *  rehash policy supports it.
        -: 1056:  */
        -: 1057:  template<typename _Key, typename _Value, typename _Alloc,
        -: 1058:	   typename _ExtractKey, typename _Equal,
        -: 1059:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1060:	   typename _RehashPolicy, typename _Traits,
        -: 1061:	   typename =
        -: 1062:	     __detected_or_t<false_type, __has_load_factor, _RehashPolicy>>
        -: 1063:    struct _Rehash_base;
        -: 1064:
        -: 1065:  /// Specialization when rehash policy doesn't provide load factor management.
        -: 1066:  template<typename _Key, typename _Value, typename _Alloc,
        -: 1067:	   typename _ExtractKey, typename _Equal,
        -: 1068:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1069:	   typename _RehashPolicy, typename _Traits>
        -: 1070:    struct _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -: 1071:			_Hash, _RangeHash, _Unused, _RehashPolicy, _Traits,
        -: 1072:			false_type /* Has load factor */>
        -: 1073:    {
        -: 1074:    };
        -: 1075:
        -: 1076:  /// Specialization when rehash policy provide load factor management.
        -: 1077:  template<typename _Key, typename _Value, typename _Alloc,
        -: 1078:	   typename _ExtractKey, typename _Equal,
        -: 1079:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1080:	   typename _RehashPolicy, typename _Traits>
        -: 1081:    struct _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -: 1082:			_Hash, _RangeHash, _Unused, _RehashPolicy, _Traits,
        -: 1083:			true_type /* Has load factor */>
        -: 1084:    {
        -: 1085:      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey,
        -: 1086:				     _Equal, _Hash, _RangeHash, _Unused,
        -: 1087:				     _RehashPolicy, _Traits>;
        -: 1088:
        -: 1089:      float
        -: 1090:      max_load_factor() const noexcept
        -: 1091:      {
        -: 1092:	const __hashtable* __this = static_cast<const __hashtable*>(this);
        -: 1093:	return __this->__rehash_policy().max_load_factor();
        -: 1094:      }
        -: 1095:
        -: 1096:      void
        -: 1097:      max_load_factor(float __z)
        -: 1098:      {
        -: 1099:	__hashtable* __this = static_cast<__hashtable*>(this);
        -: 1100:	__this->__rehash_policy(_RehashPolicy(__z));
        -: 1101:      }
        -: 1102:
        -: 1103:      void
        -: 1104:      reserve(std::size_t __n)
        -: 1105:      {
        -: 1106:	__hashtable* __this = static_cast<__hashtable*>(this);
        -: 1107:	__this->rehash(__this->__rehash_policy()._M_bkt_for_elements(__n));
        -: 1108:      }
        -: 1109:    };
        -: 1110:
        -: 1111:  /**
        -: 1112:   *  Primary class template _Hashtable_ebo_helper.
        -: 1113:   *
        -: 1114:   *  Helper class using EBO when it is not forbidden (the type is not
        -: 1115:   *  final) and when it is worth it (the type is empty.)
        -: 1116:   */
        -: 1117:  template<int _Nm, typename _Tp,
        -: 1118:	   bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
        -: 1119:    struct _Hashtable_ebo_helper;
        -: 1120:
        -: 1121:  /// Specialization using EBO.
        -: 1122:  template<int _Nm, typename _Tp>
        -: 1123:    struct _Hashtable_ebo_helper<_Nm, _Tp, true>
        -: 1124:    : private _Tp
        -: 1125:    {
   201018: 1126:      _Hashtable_ebo_helper() = default;
------------------
_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEELb1EEC2Ev:
function _ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEELb1EEC2Ev called 1 returned 100% blocks executed 100%
        1: 1126:      _Hashtable_ebo_helper() = default;
        1: 1126-block  0
call    0 returned 1
------------------
_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEELb1EEC2Ev:
function _ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEELb1EEC2Ev called 1 returned 100% blocks executed 100%
        1: 1126:      _Hashtable_ebo_helper() = default;
        1: 1126-block  0
call    0 returned 1
------------------
_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKjdELb0EEEELb1EEC2Ev:
function _ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKjdELb0EEEELb1EEC2Ev called 4 returned 100% blocks executed 100%
        4: 1126:      _Hashtable_ebo_helper() = default;
        4: 1126-block  0
call    0 returned 4
------------------
_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeIjLb0EEEELb1EEC2Ev:
function _ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeIjLb0EEEELb1EEC2Ev called 4 returned 100% blocks executed 100%
        4: 1126:      _Hashtable_ebo_helper() = default;
        4: 1126-block  0
call    0 returned 4
------------------
_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEELb1EEC2Ev:
function _ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEELb1EEC2Ev called 201008 returned 100% blocks executed 100%
   201008: 1126:      _Hashtable_ebo_helper() = default;
   201008: 1126-block  0
call    0 returned 201008
------------------
        -: 1127:
        -: 1128:      template<typename _OtherTp>
        -: 1129:	_Hashtable_ebo_helper(_OtherTp&& __tp)
        -: 1130:	: _Tp(std::forward<_OtherTp>(__tp))
        -: 1131:	{ }
        -: 1132:
 10570823: 1133:      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
------------------
_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEELb1EE7_M_cgetEv:
function _ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEELb1EE7_M_cgetEv called 13025 returned 100% blocks executed 100%
    13025: 1133:      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
    13025: 1133-block  0
------------------
_ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIjELb1EE7_M_cgetEv:
function _ZNKSt8__detail21_Hashtable_ebo_helperILi0ESt8equal_toIjELb1EE7_M_cgetEv called 3714263 returned 100% blocks executed 100%
  3714263: 1133:      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
  3714263: 1133-block  0
------------------
_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEELb1EE7_M_cgetEv:
function _ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEELb1EE7_M_cgetEv called 369316 returned 100% blocks executed 100%
   369316: 1133:      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
   369316: 1133-block  0
------------------
_ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIjELb1EE7_M_cgetEv:
function _ZNKSt8__detail21_Hashtable_ebo_helperILi1ESt4hashIjELb1EE7_M_cgetEv called 6474219 returned 100% blocks executed 100%
  6474219: 1133:      const _Tp& _M_cget() const { return static_cast<const _Tp&>(*this); }
  6474219: 1133-block  0
------------------
  3588838: 1134:      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
------------------
_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEELb1EE6_M_getEv:
function _ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEELb1EE6_M_getEv called 5132 returned 100% blocks executed 100%
     5132: 1134:      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
     5132: 1134-block  0
------------------
_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEELb1EE6_M_getEv:
function _ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEELb1EE6_M_getEv called 1035334 returned 100% blocks executed 100%
  1035334: 1134:      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
  1035334: 1134-block  0
------------------
_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKjdELb0EEEELb1EE6_M_getEv:
function _ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKjdELb0EEEELb1EE6_M_getEv called 140978 returned 100% blocks executed 100%
   140978: 1134:      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
   140978: 1134-block  0
------------------
_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeIjLb0EEEELb1EE6_M_getEv:
function _ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeIjLb0EEEELb1EE6_M_getEv called 66 returned 100% blocks executed 100%
       66: 1134:      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
       66: 1134-block  0
------------------
_ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEELb1EE6_M_getEv:
function _ZNSt8__detail21_Hashtable_ebo_helperILi0ESaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEELb1EE6_M_getEv called 2407328 returned 100% blocks executed 100%
  2407328: 1134:      _Tp& _M_get() { return static_cast<_Tp&>(*this); }
  2407328: 1134-block  0
------------------
        -: 1135:    };
        -: 1136:
        -: 1137:  /// Specialization not using EBO.
        -: 1138:  template<int _Nm, typename _Tp>
        -: 1139:    struct _Hashtable_ebo_helper<_Nm, _Tp, false>
        -: 1140:    {
        -: 1141:      _Hashtable_ebo_helper() = default;
        -: 1142:
        -: 1143:      template<typename _OtherTp>
        -: 1144:	_Hashtable_ebo_helper(_OtherTp&& __tp)
        -: 1145:	: _M_tp(std::forward<_OtherTp>(__tp))
        -: 1146:	{ }
        -: 1147:
        -: 1148:      const _Tp& _M_cget() const { return _M_tp; }
        -: 1149:      _Tp& _M_get() { return _M_tp; }
        -: 1150:
        -: 1151:    private:
        -: 1152:      _Tp _M_tp;
        -: 1153:    };
        -: 1154:
        -: 1155:  /**
        -: 1156:   *  Primary class template _Local_iterator_base.
        -: 1157:   *
        -: 1158:   *  Base class for local iterators, used to iterate within a bucket
        -: 1159:   *  but not between buckets.
        -: 1160:   */
        -: 1161:  template<typename _Key, typename _Value, typename _ExtractKey,
        -: 1162:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1163:	   bool __cache_hash_code>
        -: 1164:    struct _Local_iterator_base;
        -: 1165:
        -: 1166:  /**
        -: 1167:   *  Primary class template _Hash_code_base.
        -: 1168:   *
        -: 1169:   *  Encapsulates two policy issues that aren't quite orthogonal.
        -: 1170:   *   (1) the difference between using a ranged hash function and using
        -: 1171:   *       the combination of a hash function and a range-hashing function.
        -: 1172:   *       In the former case we don't have such things as hash codes, so
        -: 1173:   *       we have a dummy type as placeholder.
        -: 1174:   *   (2) Whether or not we cache hash codes.  Caching hash codes is
        -: 1175:   *       meaningless if we have a ranged hash function.
        -: 1176:   *
        -: 1177:   *  We also put the key extraction objects here, for convenience.
        -: 1178:   *  Each specialization derives from one or more of the template
        -: 1179:   *  parameters to benefit from Ebo. This is important as this type
        -: 1180:   *  is inherited in some cases by the _Local_iterator_base type used
        -: 1181:   *  to implement local_iterator and const_local_iterator. As with
        -: 1182:   *  any iterator type we prefer to make it as small as possible.
        -: 1183:   */
        -: 1184:  template<typename _Key, typename _Value, typename _ExtractKey,
        -: 1185:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1186:	   bool __cache_hash_code>
        -: 1187:    struct _Hash_code_base
        -: 1188:    : private _Hashtable_ebo_helper<1, _Hash>
        -: 1189:    {
        -: 1190:    private:
        -: 1191:      using __ebo_hash = _Hashtable_ebo_helper<1, _Hash>;
        -: 1192:
        -: 1193:      // Gives the local iterator implementation access to _M_bucket_index().
        -: 1194:      friend struct _Local_iterator_base<_Key, _Value, _ExtractKey,
        -: 1195:					 _Hash, _RangeHash, _Unused, false>;
        -: 1196:
        -: 1197:    public:
        -: 1198:      typedef _Hash					hasher;
        -: 1199:
        -: 1200:      hasher
        -: 1201:      hash_function() const
        -: 1202:      { return _M_hash(); }
        -: 1203:
        -: 1204:    protected:
        -: 1205:      typedef std::size_t 				__hash_code;
        -: 1206:
        -: 1207:      // We need the default constructor for the local iterators and _Hashtable
        -: 1208:      // default constructor.
        -: 1209:      _Hash_code_base() = default;
        -: 1210:      _Hash_code_base(const _Hash& __hash) : __ebo_hash(__hash) { }
        -: 1211:
        -: 1212:      __hash_code
  6843535: 1213:      _M_hash_code(const _Key& __k) const
        -: 1214:      {
        -: 1215:	static_assert(__is_invocable<const _Hash&, const _Key&>{},
        -: 1216:	    "hash function must be invocable with an argument of key type");
  6843535: 1217:	return _M_hash()(__k);
        -: 1218:      }
------------------
_ZNKSt8__detail15_Hash_code_baseIjjNS_9_IdentityESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERKj:
function _ZNKSt8__detail15_Hash_code_baseIjjNS_9_IdentityESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERKj called 1031456 returned 100% blocks executed 100%
  1031456: 1213:      _M_hash_code(const _Key& __k) const
        -: 1214:      {
        -: 1215:	static_assert(__is_invocable<const _Hash&, const _Key&>{},
        -: 1216:	    "hash function must be invocable with an argument of key type");
  1031456: 1217:	return _M_hash()(__k);
  1031456: 1217-block  0
call    0 returned 1031456
call    1 returned 1031456
        -: 1218:      }
------------------
_ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS8_:
function _ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERS8_ called 264564 returned 100% blocks executed 100%
   264564: 1213:      _M_hash_code(const _Key& __k) const
        -: 1214:      {
        -: 1215:	static_assert(__is_invocable<const _Hash&, const _Key&>{},
        -: 1216:	    "hash function must be invocable with an argument of key type");
   264564: 1217:	return _M_hash()(__k);
   264564: 1217-block  0
call    0 returned 264564
call    1 returned 264564
        -: 1218:      }
------------------
_ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKS6_:
function _ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE12_M_hash_codeERKS6_ called 104752 returned 100% blocks executed 100%
   104752: 1213:      _M_hash_code(const _Key& __k) const
        -: 1214:      {
        -: 1215:	static_assert(__is_invocable<const _Hash&, const _Key&>{},
        -: 1216:	    "hash function must be invocable with an argument of key type");
   104752: 1217:	return _M_hash()(__k);
   104752: 1217-block  0
call    0 returned 104752
call    1 returned 104752
        -: 1218:      }
------------------
_ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjdENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_:
function _ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjdENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_ called 1702429 returned 100% blocks executed 100%
  1702429: 1213:      _M_hash_code(const _Key& __k) const
        -: 1214:      {
        -: 1215:	static_assert(__is_invocable<const _Hash&, const _Key&>{},
        -: 1216:	    "hash function must be invocable with an argument of key type");
  1702429: 1217:	return _M_hash()(__k);
  1702429: 1217-block  0
call    0 returned 1702429
call    1 returned 1702429
        -: 1218:      }
------------------
_ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_:
function _ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE12_M_hash_codeERS2_ called 3740334 returned 100% blocks executed 100%
  3740334: 1213:      _M_hash_code(const _Key& __k) const
        -: 1214:      {
        -: 1215:	static_assert(__is_invocable<const _Hash&, const _Key&>{},
        -: 1216:	    "hash function must be invocable with an argument of key type");
  3740334: 1217:	return _M_hash()(__k);
  3740334: 1217-block  0
call    0 returned 3740334
call    1 returned 3740334
        -: 1218:      }
------------------
        -: 1219:
        -: 1220:      template<typename _Kt>
        -: 1221:	__hash_code
        -: 1222:	_M_hash_code_tr(const _Kt& __k) const
        -: 1223:	{
        -: 1224:	  static_assert(__is_invocable<const _Hash&, const _Kt&>{},
        -: 1225:	    "hash function must be invocable with an argument of key type");
        -: 1226:	  return _M_hash()(__k);
        -: 1227:	}
        -: 1228:
        -: 1229:      std::size_t
  5499362: 1230:      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
  5499362: 1231:      { return _RangeHash{}(__c, __bkt_count); }
------------------
_ZNKSt8__detail15_Hash_code_baseIjjNS_9_IdentityESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEyy:
function _ZNKSt8__detail15_Hash_code_baseIjjNS_9_IdentityESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEyy called 869106 returned 100% blocks executed 100%
   869106: 1230:      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
   869106: 1231:      { return _RangeHash{}(__c, __bkt_count); }
   869106: 1231-block  0
call    0 returned 869106
------------------
_ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEyy:
function _ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEyy called 264579 returned 100% blocks executed 100%
   264579: 1230:      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
   264579: 1231:      { return _RangeHash{}(__c, __bkt_count); }
   264579: 1231-block  0
call    0 returned 264579
------------------
_ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEyy:
function _ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexEyy called 104760 returned 100% blocks executed 100%
   104760: 1230:      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
   104760: 1231:      { return _RangeHash{}(__c, __bkt_count); }
   104760: 1231-block  0
call    0 returned 104760
------------------
_ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjdENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEyy:
function _ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjdENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEyy called 1558921 returned 100% blocks executed 100%
  1558921: 1230:      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
  1558921: 1231:      { return _RangeHash{}(__c, __bkt_count); }
  1558921: 1231-block  0
call    0 returned 1558921
------------------
_ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEyy:
function _ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexEyy called 2701996 returned 100% blocks executed 100%
  2701996: 1230:      _M_bucket_index(__hash_code __c, std::size_t __bkt_count) const
  2701996: 1231:      { return _RangeHash{}(__c, __bkt_count); }
  2701996: 1231-block  0
call    0 returned 2701996
------------------
        -: 1232:
        -: 1233:      std::size_t
  1551926: 1234:      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
        -: 1235:		      std::size_t __bkt_count) const
        -: 1236:	noexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>()))
        -: 1237:		  && noexcept(declval<const _RangeHash&>()((__hash_code)0,
        -: 1238:							   (std::size_t)0)) )
        -: 1239:      {
  3103852: 1240:	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
  1551926: 1241:			    __bkt_count);
        -: 1242:      }
------------------
_ZNKSt8__detail15_Hash_code_baseIjjNS_9_IdentityESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIjLb0EEEy:
function _ZNKSt8__detail15_Hash_code_baseIjjNS_9_IdentityESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIjLb0EEEy called 162353 returned 100% blocks executed 100%
   162353: 1234:      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
        -: 1235:		      std::size_t __bkt_count) const
        -: 1236:	noexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>()))
        -: 1237:		  && noexcept(declval<const _RangeHash&>()((__hash_code)0,
        -: 1238:							   (std::size_t)0)) )
        -: 1239:      {
   324706: 1240:	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
   162353: 1240-block  0
call    0 returned 162353
call    1 returned 162353
call    2 returned 162353
call    3 returned 162353
   162353: 1240-block  1
   162353: 1241:			    __bkt_count);
        -: 1242:      }
------------------
_ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjdENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS3_Lb0EEEy:
function _ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjdENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS3_Lb0EEEy called 143549 returned 100% blocks executed 100%
   143549: 1234:      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
        -: 1235:		      std::size_t __bkt_count) const
        -: 1236:	noexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>()))
        -: 1237:		  && noexcept(declval<const _RangeHash&>()((__hash_code)0,
        -: 1238:							   (std::size_t)0)) )
        -: 1239:      {
   287098: 1240:	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
   143549: 1240-block  0
call    0 returned 143549
call    1 returned 143549
call    2 returned 143549
call    3 returned 143549
   143549: 1240-block  1
   143549: 1241:			    __bkt_count);
        -: 1242:      }
------------------
_ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS6_Lb0EEEy:
function _ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE15_M_bucket_indexERKNS_16_Hash_node_valueIS6_Lb0EEEy called 1246024 returned 100% blocks executed 100%
  1246024: 1234:      _M_bucket_index(const _Hash_node_value<_Value, false>& __n,
        -: 1235:		      std::size_t __bkt_count) const
        -: 1236:	noexcept( noexcept(declval<const _Hash&>()(declval<const _Key&>()))
        -: 1237:		  && noexcept(declval<const _RangeHash&>()((__hash_code)0,
        -: 1238:							   (std::size_t)0)) )
        -: 1239:      {
  2492048: 1240:	return _RangeHash{}(_M_hash_code(_ExtractKey{}(__n._M_v())),
  1246024: 1240-block  0
call    0 returned 1246024
call    1 returned 1246024
call    2 returned 1246024
call    3 returned 1246024
  1246024: 1240-block  1
  1246024: 1241:			    __bkt_count);
        -: 1242:      }
------------------
        -: 1243:
        -: 1244:      std::size_t
   743377: 1245:      _M_bucket_index(const _Hash_node_value<_Value, true>& __n,
        -: 1246:		      std::size_t __bkt_count) const
        -: 1247:	noexcept( noexcept(declval<const _RangeHash&>()((__hash_code)0,
        -: 1248:							(std::size_t)0)) )
   743377: 1249:      { return _RangeHash{}(__n._M_hash_code, __bkt_count); }
------------------
_ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS9_Lb1EEEy:
function _ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS9_Lb1EEEy called 654516 returned 100% blocks executed 100%
   654516: 1245:      _M_bucket_index(const _Hash_node_value<_Value, true>& __n,
        -: 1246:		      std::size_t __bkt_count) const
        -: 1247:	noexcept( noexcept(declval<const _RangeHash&>()((__hash_code)0,
        -: 1248:							(std::size_t)0)) )
   654516: 1249:      { return _RangeHash{}(__n._M_hash_code, __bkt_count); }
   654516: 1249-block  0
call    0 returned 654516
------------------
_ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS6_Lb1EEEy:
function _ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE15_M_bucket_indexERKNS_16_Hash_node_valueIS6_Lb1EEEy called 88861 returned 100% blocks executed 100%
    88861: 1245:      _M_bucket_index(const _Hash_node_value<_Value, true>& __n,
        -: 1246:		      std::size_t __bkt_count) const
        -: 1247:	noexcept( noexcept(declval<const _RangeHash&>()((__hash_code)0,
        -: 1248:							(std::size_t)0)) )
    88861: 1249:      { return _RangeHash{}(__n._M_hash_code, __bkt_count); }
    88861: 1249-block  0
call    0 returned 88861
------------------
        -: 1250:
        -: 1251:      void
   533228: 1252:      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
   533228: 1253:      { }
------------------
_ZNKSt8__detail15_Hash_code_baseIjjNS_9_IdentityESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEy:
function _ZNKSt8__detail15_Hash_code_baseIjjNS_9_IdentityESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEy called 15 returned 100% blocks executed 100%
       15: 1252:      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
       15: 1253:      { }
------------------
_ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEy:
function _ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEy called 497989 returned 100% blocks executed 100%
   497989: 1252:      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
   497989: 1253:      { }
------------------
_ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjdENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEy:
function _ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjdENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE13_M_store_codeERNS_21_Hash_node_code_cacheILb0EEEy called 35224 returned 100% blocks executed 100%
    35224: 1252:      _M_store_code(_Hash_node_code_cache<false>&, __hash_code) const
    35224: 1253:      { }
------------------
        -: 1254:
        -: 1255:      void
        -: 1256:      _M_copy_code(_Hash_node_code_cache<false>&,
        -: 1257:		   const _Hash_node_code_cache<false>&) const
        -: 1258:      { }
        -: 1259:
        -: 1260:      void
   260105: 1261:      _M_store_code(_Hash_node_code_cache<true>& __n, __hash_code __c) const
   260105: 1262:      { __n._M_hash_code = __c; }
------------------
_ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeERNS_21_Hash_node_code_cacheILb1EEEy:
function _ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeERNS_21_Hash_node_code_cacheILb1EEEy called 1279 returned 100% blocks executed 100%
     1279: 1261:      _M_store_code(_Hash_node_code_cache<true>& __n, __hash_code __c) const
     1279: 1262:      { __n._M_hash_code = __c; }
------------------
_ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeERNS_21_Hash_node_code_cacheILb1EEEy:
function _ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE13_M_store_codeERNS_21_Hash_node_code_cacheILb1EEEy called 258826 returned 100% blocks executed 100%
   258826: 1261:      _M_store_code(_Hash_node_code_cache<true>& __n, __hash_code __c) const
   258826: 1262:      { __n._M_hash_code = __c; }
------------------
        -: 1263:
        -: 1264:      void
        -: 1265:      _M_copy_code(_Hash_node_code_cache<true>& __to,
        -: 1266:		   const _Hash_node_code_cache<true>& __from) const
        -: 1267:      { __to._M_hash_code = __from._M_hash_code; }
        -: 1268:
        -: 1269:      void
        -: 1270:      _M_swap(_Hash_code_base& __x)
        -: 1271:      { std::swap(__ebo_hash::_M_get(), __x.__ebo_hash::_M_get()); }
        -: 1272:
        -: 1273:      const _Hash&
  6843535: 1274:      _M_hash() const { return __ebo_hash::_M_cget(); }
------------------
_ZNKSt8__detail15_Hash_code_baseIjjNS_9_IdentityESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv:
function _ZNKSt8__detail15_Hash_code_baseIjjNS_9_IdentityESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv called 1031456 returned 100% blocks executed 100%
  1031456: 1274:      _M_hash() const { return __ebo_hash::_M_cget(); }
  1031456: 1274-block  0
call    0 returned 1031456
------------------
_ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE7_M_hashEv:
function _ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE7_M_hashEv called 264564 returned 100% blocks executed 100%
   264564: 1274:      _M_hash() const { return __ebo_hash::_M_cget(); }
   264564: 1274-block  0
call    0 returned 264564
------------------
_ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE7_M_hashEv:
function _ZNKSt8__detail15_Hash_code_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb1EE7_M_hashEv called 104752 returned 100% blocks executed 100%
   104752: 1274:      _M_hash() const { return __ebo_hash::_M_cget(); }
   104752: 1274-block  0
call    0 returned 104752
------------------
_ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjdENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv:
function _ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjdENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv called 1702429 returned 100% blocks executed 100%
  1702429: 1274:      _M_hash() const { return __ebo_hash::_M_cget(); }
  1702429: 1274-block  0
call    0 returned 1702429
------------------
_ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv:
function _ZNKSt8__detail15_Hash_code_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashELb0EE7_M_hashEv called 3740334 returned 100% blocks executed 100%
  3740334: 1274:      _M_hash() const { return __ebo_hash::_M_cget(); }
  3740334: 1274-block  0
call    0 returned 3740334
------------------
        -: 1275:    };
        -: 1276:
        -: 1277:  /// Partial specialization used when nodes contain a cached hash code.
        -: 1278:  template<typename _Key, typename _Value, typename _ExtractKey,
        -: 1279:	   typename _Hash, typename _RangeHash, typename _Unused>
        -: 1280:    struct _Local_iterator_base<_Key, _Value, _ExtractKey,
        -: 1281:				_Hash, _RangeHash, _Unused, true>
        -: 1282:    : public _Node_iterator_base<_Value, true>
        -: 1283:    {
        -: 1284:    protected:
        -: 1285:      using __base_node_iter = _Node_iterator_base<_Value, true>;
        -: 1286:      using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
        -: 1287:					      _Hash, _RangeHash, _Unused, true>;
        -: 1288:
        -: 1289:      _Local_iterator_base() = default;
        -: 1290:      _Local_iterator_base(const __hash_code_base&,
        -: 1291:			   _Hash_node<_Value, true>* __p,
        -: 1292:			   std::size_t __bkt, std::size_t __bkt_count)
        -: 1293:      : __base_node_iter(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count)
        -: 1294:      { }
        -: 1295:
        -: 1296:      void
        -: 1297:      _M_incr()
        -: 1298:      {
        -: 1299:	__base_node_iter::_M_incr();
        -: 1300:	if (this->_M_cur)
        -: 1301:	  {
        -: 1302:	    std::size_t __bkt
        -: 1303:	      = _RangeHash{}(this->_M_cur->_M_hash_code, _M_bucket_count);
        -: 1304:	    if (__bkt != _M_bucket)
        -: 1305:	      this->_M_cur = nullptr;
        -: 1306:	  }
        -: 1307:      }
        -: 1308:
        -: 1309:      std::size_t _M_bucket;
        -: 1310:      std::size_t _M_bucket_count;
        -: 1311:
        -: 1312:    public:
        -: 1313:      std::size_t
        -: 1314:      _M_get_bucket() const { return _M_bucket; }  // for debug mode
        -: 1315:    };
        -: 1316:
        -: 1317:  // Uninitialized storage for a _Hash_code_base.
        -: 1318:  // This type is DefaultConstructible and Assignable even if the
        -: 1319:  // _Hash_code_base type isn't, so that _Local_iterator_base<..., false>
        -: 1320:  // can be DefaultConstructible and Assignable.
        -: 1321:  template<typename _Tp, bool _IsEmpty = std::is_empty<_Tp>::value>
        -: 1322:    struct _Hash_code_storage
        -: 1323:    {
        -: 1324:      __gnu_cxx::__aligned_buffer<_Tp> _M_storage;
        -: 1325:
        -: 1326:      _Tp*
        -: 1327:      _M_h() { return _M_storage._M_ptr(); }
        -: 1328:
        -: 1329:      const _Tp*
        -: 1330:      _M_h() const { return _M_storage._M_ptr(); }
        -: 1331:    };
        -: 1332:
        -: 1333:  // Empty partial specialization for empty _Hash_code_base types.
        -: 1334:  template<typename _Tp>
        -: 1335:    struct _Hash_code_storage<_Tp, true>
        -: 1336:    {
        -: 1337:      static_assert( std::is_empty<_Tp>::value, "Type must be empty" );
        -: 1338:
        -: 1339:      // As _Tp is an empty type there will be no bytes written/read through
        -: 1340:      // the cast pointer, so no strict-aliasing violation.
        -: 1341:      _Tp*
        -: 1342:      _M_h() { return reinterpret_cast<_Tp*>(this); }
        -: 1343:
        -: 1344:      const _Tp*
        -: 1345:      _M_h() const { return reinterpret_cast<const _Tp*>(this); }
        -: 1346:    };
        -: 1347:
        -: 1348:  template<typename _Key, typename _Value, typename _ExtractKey,
        -: 1349:	   typename _Hash, typename _RangeHash, typename _Unused>
        -: 1350:    using __hash_code_for_local_iter
        -: 1351:      = _Hash_code_storage<_Hash_code_base<_Key, _Value, _ExtractKey,
        -: 1352:					   _Hash, _RangeHash, _Unused, false>>;
        -: 1353:
        -: 1354:  // Partial specialization used when hash codes are not cached
        -: 1355:  template<typename _Key, typename _Value, typename _ExtractKey,
        -: 1356:	   typename _Hash, typename _RangeHash, typename _Unused>
        -: 1357:    struct _Local_iterator_base<_Key, _Value, _ExtractKey,
        -: 1358:				_Hash, _RangeHash, _Unused, false>
        -: 1359:    : __hash_code_for_local_iter<_Key, _Value, _ExtractKey, _Hash, _RangeHash,
        -: 1360:				 _Unused>
        -: 1361:    , _Node_iterator_base<_Value, false>
        -: 1362:    {
        -: 1363:    protected:
        -: 1364:      using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
        -: 1365:					     _Hash, _RangeHash, _Unused, false>;
        -: 1366:      using __node_iter_base = _Node_iterator_base<_Value, false>;
        -: 1367:
        -: 1368:      _Local_iterator_base() : _M_bucket_count(-1) { }
        -: 1369:
        -: 1370:      _Local_iterator_base(const __hash_code_base& __base,
        -: 1371:			   _Hash_node<_Value, false>* __p,
        -: 1372:			   std::size_t __bkt, std::size_t __bkt_count)
        -: 1373:      : __node_iter_base(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count)
        -: 1374:      { _M_init(__base); }
        -: 1375:
        -: 1376:      ~_Local_iterator_base()
        -: 1377:      {
        -: 1378:	if (_M_bucket_count != size_t(-1))
        -: 1379:	  _M_destroy();
        -: 1380:      }
        -: 1381:
        -: 1382:      _Local_iterator_base(const _Local_iterator_base& __iter)
        -: 1383:      : __node_iter_base(__iter._M_cur), _M_bucket(__iter._M_bucket)
        -: 1384:      , _M_bucket_count(__iter._M_bucket_count)
        -: 1385:      {
        -: 1386:	if (_M_bucket_count != size_t(-1))
        -: 1387:	  _M_init(*__iter._M_h());
        -: 1388:      }
        -: 1389:
        -: 1390:      _Local_iterator_base&
        -: 1391:      operator=(const _Local_iterator_base& __iter)
        -: 1392:      {
        -: 1393:	if (_M_bucket_count != -1)
        -: 1394:	  _M_destroy();
        -: 1395:	this->_M_cur = __iter._M_cur;
        -: 1396:	_M_bucket = __iter._M_bucket;
        -: 1397:	_M_bucket_count = __iter._M_bucket_count;
        -: 1398:	if (_M_bucket_count != -1)
        -: 1399:	  _M_init(*__iter._M_h());
        -: 1400:	return *this;
        -: 1401:      }
        -: 1402:
        -: 1403:      void
        -: 1404:      _M_incr()
        -: 1405:      {
        -: 1406:	__node_iter_base::_M_incr();
        -: 1407:	if (this->_M_cur)
        -: 1408:	  {
        -: 1409:	    std::size_t __bkt = this->_M_h()->_M_bucket_index(*this->_M_cur,
        -: 1410:							      _M_bucket_count);
        -: 1411:	    if (__bkt != _M_bucket)
        -: 1412:	      this->_M_cur = nullptr;
        -: 1413:	  }
        -: 1414:      }
        -: 1415:
        -: 1416:      std::size_t _M_bucket;
        -: 1417:      std::size_t _M_bucket_count;
        -: 1418:
        -: 1419:      void
        -: 1420:      _M_init(const __hash_code_base& __base)
        -: 1421:      { ::new(this->_M_h()) __hash_code_base(__base); }
        -: 1422:
        -: 1423:      void
        -: 1424:      _M_destroy() { this->_M_h()->~__hash_code_base(); }
        -: 1425:
        -: 1426:    public:
        -: 1427:      std::size_t
        -: 1428:      _M_get_bucket() const { return _M_bucket; }  // for debug mode
        -: 1429:    };
        -: 1430:
        -: 1431:  /// local iterators
        -: 1432:  template<typename _Key, typename _Value, typename _ExtractKey,
        -: 1433:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1434:	   bool __constant_iterators, bool __cache>
        -: 1435:    struct _Local_iterator
        -: 1436:    : public _Local_iterator_base<_Key, _Value, _ExtractKey,
        -: 1437:				  _Hash, _RangeHash, _Unused, __cache>
        -: 1438:    {
        -: 1439:    private:
        -: 1440:      using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,
        -: 1441:					   _Hash, _RangeHash, _Unused, __cache>;
        -: 1442:      using __hash_code_base = typename __base_type::__hash_code_base;
        -: 1443:
        -: 1444:    public:
        -: 1445:      typedef _Value					value_type;
        -: 1446:      typedef typename std::conditional<__constant_iterators,
        -: 1447:					const value_type*, value_type*>::type
        -: 1448:							pointer;
        -: 1449:      typedef typename std::conditional<__constant_iterators,
        -: 1450:					const value_type&, value_type&>::type
        -: 1451:							reference;
        -: 1452:      typedef std::ptrdiff_t				difference_type;
        -: 1453:      typedef std::forward_iterator_tag			iterator_category;
        -: 1454:
        -: 1455:      _Local_iterator() = default;
        -: 1456:
        -: 1457:      _Local_iterator(const __hash_code_base& __base,
        -: 1458:		      _Hash_node<_Value, __cache>* __n,
        -: 1459:		      std::size_t __bkt, std::size_t __bkt_count)
        -: 1460:      : __base_type(__base, __n, __bkt, __bkt_count)
        -: 1461:      { }
        -: 1462:
        -: 1463:      reference
        -: 1464:      operator*() const
        -: 1465:      { return this->_M_cur->_M_v(); }
        -: 1466:
        -: 1467:      pointer
        -: 1468:      operator->() const
        -: 1469:      { return this->_M_cur->_M_valptr(); }
        -: 1470:
        -: 1471:      _Local_iterator&
        -: 1472:      operator++()
        -: 1473:      {
        -: 1474:	this->_M_incr();
        -: 1475:	return *this;
        -: 1476:      }
        -: 1477:
        -: 1478:      _Local_iterator
        -: 1479:      operator++(int)
        -: 1480:      {
        -: 1481:	_Local_iterator __tmp(*this);
        -: 1482:	this->_M_incr();
        -: 1483:	return __tmp;
        -: 1484:      }
        -: 1485:    };
        -: 1486:
        -: 1487:  /// local const_iterators
        -: 1488:  template<typename _Key, typename _Value, typename _ExtractKey,
        -: 1489:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1490:	   bool __constant_iterators, bool __cache>
        -: 1491:    struct _Local_const_iterator
        -: 1492:    : public _Local_iterator_base<_Key, _Value, _ExtractKey,
        -: 1493:				  _Hash, _RangeHash, _Unused, __cache>
        -: 1494:    {
        -: 1495:    private:
        -: 1496:      using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey,
        -: 1497:					   _Hash, _RangeHash, _Unused, __cache>;
        -: 1498:      using __hash_code_base = typename __base_type::__hash_code_base;
        -: 1499:
        -: 1500:    public:
        -: 1501:      typedef _Value					value_type;
        -: 1502:      typedef const value_type*				pointer;
        -: 1503:      typedef const value_type&				reference;
        -: 1504:      typedef std::ptrdiff_t				difference_type;
        -: 1505:      typedef std::forward_iterator_tag			iterator_category;
        -: 1506:
        -: 1507:      _Local_const_iterator() = default;
        -: 1508:
        -: 1509:      _Local_const_iterator(const __hash_code_base& __base,
        -: 1510:			    _Hash_node<_Value, __cache>* __n,
        -: 1511:			    std::size_t __bkt, std::size_t __bkt_count)
        -: 1512:      : __base_type(__base, __n, __bkt, __bkt_count)
        -: 1513:      { }
        -: 1514:
        -: 1515:      _Local_const_iterator(const _Local_iterator<_Key, _Value, _ExtractKey,
        -: 1516:						  _Hash, _RangeHash, _Unused,
        -: 1517:						  __constant_iterators,
        -: 1518:						  __cache>& __x)
        -: 1519:      : __base_type(__x)
        -: 1520:      { }
        -: 1521:
        -: 1522:      reference
        -: 1523:      operator*() const
        -: 1524:      { return this->_M_cur->_M_v(); }
        -: 1525:
        -: 1526:      pointer
        -: 1527:      operator->() const
        -: 1528:      { return this->_M_cur->_M_valptr(); }
        -: 1529:
        -: 1530:      _Local_const_iterator&
        -: 1531:      operator++()
        -: 1532:      {
        -: 1533:	this->_M_incr();
        -: 1534:	return *this;
        -: 1535:      }
        -: 1536:
        -: 1537:      _Local_const_iterator
        -: 1538:      operator++(int)
        -: 1539:      {
        -: 1540:	_Local_const_iterator __tmp(*this);
        -: 1541:	this->_M_incr();
        -: 1542:	return __tmp;
        -: 1543:      }
        -: 1544:    };
        -: 1545:
        -: 1546:  /**
        -: 1547:   *  Primary class template _Hashtable_base.
        -: 1548:   *
        -: 1549:   *  Helper class adding management of _Equal functor to
        -: 1550:   *  _Hash_code_base type.
        -: 1551:   *
        -: 1552:   *  Base class templates are:
        -: 1553:   *    - __detail::_Hash_code_base
        -: 1554:   *    - __detail::_Hashtable_ebo_helper
        -: 1555:   */
        -: 1556:  template<typename _Key, typename _Value, typename _ExtractKey,
        -: 1557:	   typename _Equal, typename _Hash, typename _RangeHash,
        -: 1558:	   typename _Unused, typename _Traits>
        -: 1559:    struct _Hashtable_base
        -: 1560:    : public _Hash_code_base<_Key, _Value, _ExtractKey, _Hash, _RangeHash,
        -: 1561:			     _Unused, _Traits::__hash_cached::value>,
        -: 1562:      private _Hashtable_ebo_helper<0, _Equal>
        -: 1563:    {
        -: 1564:    public:
        -: 1565:      typedef _Key					key_type;
        -: 1566:      typedef _Value					value_type;
        -: 1567:      typedef _Equal					key_equal;
        -: 1568:      typedef std::size_t				size_type;
        -: 1569:      typedef std::ptrdiff_t				difference_type;
        -: 1570:
        -: 1571:      using __traits_type = _Traits;
        -: 1572:      using __hash_cached = typename __traits_type::__hash_cached;
        -: 1573:
        -: 1574:      using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey,
        -: 1575:					       _Hash, _RangeHash, _Unused,
        -: 1576:					       __hash_cached::value>;
        -: 1577:
        -: 1578:      using __hash_code = typename __hash_code_base::__hash_code;
        -: 1579:
        -: 1580:    private:
        -: 1581:      using _EqualEBO = _Hashtable_ebo_helper<0, _Equal>;
        -: 1582:
        -: 1583:      static bool
  3714263: 1584:      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
  3714263: 1585:      { return true; }
------------------
_ZNSt8__detail15_Hashtable_baseIjjNS_9_IdentityESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb1ELb1EEEE9_S_equalsEyRKNS_21_Hash_node_code_cacheILb0EEE:
function _ZNSt8__detail15_Hashtable_baseIjjNS_9_IdentityESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb1ELb1EEEE9_S_equalsEyRKNS_21_Hash_node_code_cacheILb0EEE called 183747 returned 100% blocks executed 100%
   183747: 1584:      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
   183747: 1585:      { return true; }
   183747: 1585-block  0
------------------
_ZNSt8__detail15_Hashtable_baseIjSt4pairIKjdENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEyRKNS_21_Hash_node_code_cacheILb0EEE:
function _ZNSt8__detail15_Hashtable_baseIjSt4pairIKjdENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEyRKNS_21_Hash_node_code_cacheILb0EEE called 1542046 returned 100% blocks executed 100%
  1542046: 1584:      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
  1542046: 1585:      { return true; }
  1542046: 1585-block  0
------------------
_ZNSt8__detail15_Hashtable_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEyRKNS_21_Hash_node_code_cacheILb0EEE:
function _ZNSt8__detail15_Hashtable_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_S_equalsEyRKNS_21_Hash_node_code_cacheILb0EEE called 1988470 returned 100% blocks executed 100%
  1988470: 1584:      _S_equals(__hash_code, const _Hash_node_code_cache<false>&)
  1988470: 1585:      { return true; }
  1988470: 1585-block  0
------------------
        -: 1586:
        -: 1587:      static bool
        -: 1588:      _S_node_equals(const _Hash_node_code_cache<false>&,
        -: 1589:		     const _Hash_node_code_cache<false>&)
        -: 1590:      { return true; }
        -: 1591:
        -: 1592:      static bool
   283285: 1593:      _S_equals(__hash_code __c, const _Hash_node_code_cache<true>& __n)
   283285: 1594:      { return __c == __n._M_hash_code; }
------------------
_ZNSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb1EEEE9_S_equalsEyRKNS_21_Hash_node_code_cacheILb1EEE:
function _ZNSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb1EEEE9_S_equalsEyRKNS_21_Hash_node_code_cacheILb1EEE called 189381 returned 100% blocks executed 100%
   189381: 1593:      _S_equals(__hash_code __c, const _Hash_node_code_cache<true>& __n)
   189381: 1594:      { return __c == __n._M_hash_code; }
   189381: 1594-block  0
------------------
_ZNSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb1ELb1EEEE9_S_equalsEyRKNS_21_Hash_node_code_cacheILb1EEE:
function _ZNSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb1ELb1EEEE9_S_equalsEyRKNS_21_Hash_node_code_cacheILb1EEE called 93904 returned 100% blocks executed 100%
    93904: 1593:      _S_equals(__hash_code __c, const _Hash_node_code_cache<true>& __n)
    93904: 1594:      { return __c == __n._M_hash_code; }
    93904: 1594-block  0
------------------
        -: 1595:
        -: 1596:      static bool
        -: 1597:      _S_node_equals(const _Hash_node_code_cache<true>& __lhn,
        -: 1598:		     const _Hash_node_code_cache<true>& __rhn)
        -: 1599:      { return __lhn._M_hash_code == __rhn._M_hash_code; }
        -: 1600:
        -: 1601:    protected:
        -: 1602:      _Hashtable_base() = default;
        -: 1603:      _Hashtable_base(const _Hash& __hash, const _Equal& __eq)
        -: 1604:      : __hash_code_base(__hash), _EqualEBO(__eq)
        -: 1605:      { }
        -: 1606:
        -: 1607:      bool
  3997548: 1608:      _M_equals(const _Key& __k, __hash_code __c,
        -: 1609:		const _Hash_node_value<_Value, __hash_cached::value>& __n) const
        -: 1610:      {
        -: 1611:	static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
        -: 1612:	  "key equality predicate must be invocable with two arguments of "
        -: 1613:	  "key type");
  3997548: 1614:	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
        -: 1615:      }
------------------
_ZNKSt8__detail15_Hashtable_baseIjjNS_9_IdentityESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_equalsERKjyRKNS_16_Hash_node_valueIjLb0EEE:
function _ZNKSt8__detail15_Hashtable_baseIjjNS_9_IdentityESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb1ELb1EEEE9_M_equalsERKjyRKNS_16_Hash_node_valueIjLb0EEE called 183747 returned 100% blocks executed 100%
   183747: 1608:      _M_equals(const _Key& __k, __hash_code __c,
        -: 1609:		const _Hash_node_value<_Value, __hash_cached::value>& __n) const
        -: 1610:      {
        -: 1611:	static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
        -: 1612:	  "key equality predicate must be invocable with two arguments of "
        -: 1613:	  "key type");
   183747: 1614:	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
   183747: 1614-block  0
call    0 returned 183747
branch  1 taken 183747 (fallthrough)
branch  2 taken 0
   183747: 1614-block  1
call    3 returned 183747
call    4 returned 183747
call    5 returned 183747
call    6 returned 183747
branch  7 taken 14932 (fallthrough)
branch  8 taken 168815
    14932: 1614-block  2
   168815: 1614-block  3
   183747: 1614-block  4
        -: 1615:      }
------------------
_ZNKSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_equalsERS8_yRKNS_16_Hash_node_valueIS9_Lb1EEE:
function _ZNKSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb1EEEE9_M_equalsERS8_yRKNS_16_Hash_node_valueIS9_Lb1EEE called 189381 returned 100% blocks executed 100%
   189381: 1608:      _M_equals(const _Key& __k, __hash_code __c,
        -: 1609:		const _Hash_node_value<_Value, __hash_cached::value>& __n) const
        -: 1610:      {
        -: 1611:	static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
        -: 1612:	  "key equality predicate must be invocable with two arguments of "
        -: 1613:	  "key type");
   189381: 1614:	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
   189381: 1614-block  0
call    0 returned 189381
branch  1 taken 5222 (fallthrough)
branch  2 taken 184159
     5222: 1614-block  1
call    3 returned 5222
branch  4 taken 5222 (fallthrough)
branch  5 taken 0 (throw)
     5222: 1614-block  2
call    6 returned 5222
call    7 returned 5222
call    8 returned 5222
branch  9 taken 5222 (fallthrough)
branch 10 taken 0
     5222: 1614-block  3
   184159: 1614-block  4
   189381: 1614-block  5
   189381: 1614-block  6
        -: 1615:      }
------------------
_ZNKSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_equalsERKS6_yRKNS_16_Hash_node_valueIS6_Lb1EEE:
function _ZNKSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb1ELb1EEEE9_M_equalsERKS6_yRKNS_16_Hash_node_valueIS6_Lb1EEE called 93904 returned 100% blocks executed 100%
    93904: 1608:      _M_equals(const _Key& __k, __hash_code __c,
        -: 1609:		const _Hash_node_value<_Value, __hash_cached::value>& __n) const
        -: 1610:      {
        -: 1611:	static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
        -: 1612:	  "key equality predicate must be invocable with two arguments of "
        -: 1613:	  "key type");
    93904: 1614:	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
    93904: 1614-block  0
call    0 returned 93904
branch  1 taken 7803 (fallthrough)
branch  2 taken 86101
     7803: 1614-block  1
call    3 returned 7803
branch  4 taken 7803 (fallthrough)
branch  5 taken 0 (throw)
     7803: 1614-block  2
call    6 returned 7803
call    7 returned 7803
call    8 returned 7803
branch  9 taken 7803 (fallthrough)
branch 10 taken 0
     7803: 1614-block  3
    86101: 1614-block  4
    93904: 1614-block  5
    93904: 1614-block  6
        -: 1615:      }
------------------
_ZNKSt8__detail15_Hashtable_baseIjSt4pairIKjdENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_yRKNS_16_Hash_node_valueIS3_Lb0EEE:
function _ZNKSt8__detail15_Hashtable_baseIjSt4pairIKjdENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_yRKNS_16_Hash_node_valueIS3_Lb0EEE called 1542046 returned 100% blocks executed 100%
  1542046: 1608:      _M_equals(const _Key& __k, __hash_code __c,
        -: 1609:		const _Hash_node_value<_Value, __hash_cached::value>& __n) const
        -: 1610:      {
        -: 1611:	static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
        -: 1612:	  "key equality predicate must be invocable with two arguments of "
        -: 1613:	  "key type");
  1542046: 1614:	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
  1542046: 1614-block  0
call    0 returned 1542046
branch  1 taken 1542046 (fallthrough)
branch  2 taken 0
  1542046: 1614-block  1
call    3 returned 1542046
branch  4 taken 1542046 (fallthrough)
branch  5 taken 0 (throw)
  1542046: 1614-block  2
call    6 returned 1542046
call    7 returned 1542046
call    8 returned 1542046
branch  9 taken 1470396 (fallthrough)
branch 10 taken 71650
  1470396: 1614-block  3
    71650: 1614-block  4
  1542046: 1614-block  5
  1542046: 1614-block  6
        -: 1615:      }
------------------
_ZNKSt8__detail15_Hashtable_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_yRKNS_16_Hash_node_valueIS6_Lb0EEE:
function _ZNKSt8__detail15_Hashtable_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE9_M_equalsERS2_yRKNS_16_Hash_node_valueIS6_Lb0EEE called 1988470 returned 100% blocks executed 100%
  1988470: 1608:      _M_equals(const _Key& __k, __hash_code __c,
        -: 1609:		const _Hash_node_value<_Value, __hash_cached::value>& __n) const
        -: 1610:      {
        -: 1611:	static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
        -: 1612:	  "key equality predicate must be invocable with two arguments of "
        -: 1613:	  "key type");
  1988470: 1614:	return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
  1988470: 1614-block  0
call    0 returned 1988470
branch  1 taken 1988470 (fallthrough)
branch  2 taken 0
  1988470: 1614-block  1
call    3 returned 1988470
branch  4 taken 1988470 (fallthrough)
branch  5 taken 0 (throw)
  1988470: 1614-block  2
call    6 returned 1988470
call    7 returned 1988470
call    8 returned 1988470
branch  9 taken 1070012 (fallthrough)
branch 10 taken 918458
  1070012: 1614-block  3
   918458: 1614-block  4
  1988470: 1614-block  5
  1988470: 1614-block  6
        -: 1615:      }
------------------
        -: 1616:
        -: 1617:      template<typename _Kt>
        -: 1618:	bool
        -: 1619:	_M_equals_tr(const _Kt& __k, __hash_code __c,
        -: 1620:		     const _Hash_node_value<_Value,
        -: 1621:					    __hash_cached::value>& __n) const
        -: 1622:	{
        -: 1623:	  static_assert(
        -: 1624:	    __is_invocable<const _Equal&, const _Kt&, const _Key&>{},
        -: 1625:	    "key equality predicate must be invocable with two arguments of "
        -: 1626:	    "key type");
        -: 1627:	  return _S_equals(__c, __n) && _M_eq()(__k, _ExtractKey{}(__n._M_v()));
        -: 1628:	}
        -: 1629:
        -: 1630:      bool
        -: 1631:      _M_node_equals(
        -: 1632:	const _Hash_node_value<_Value, __hash_cached::value>& __lhn,
        -: 1633:	const _Hash_node_value<_Value, __hash_cached::value>& __rhn) const
        -: 1634:      {
        -: 1635:	return _S_node_equals(__lhn, __rhn)
        -: 1636:	  && _M_eq()(_ExtractKey{}(__lhn._M_v()), _ExtractKey{}(__rhn._M_v()));
        -: 1637:      }
        -: 1638:
        -: 1639:      void
        -: 1640:      _M_swap(_Hashtable_base& __x)
        -: 1641:      {
        -: 1642:	__hash_code_base::_M_swap(__x);
        -: 1643:	std::swap(_EqualEBO::_M_get(), __x._EqualEBO::_M_get());
        -: 1644:      }
        -: 1645:
        -: 1646:      const _Equal&
  3727288: 1647:      _M_eq() const { return _EqualEBO::_M_cget(); }
------------------
_ZNKSt8__detail15_Hashtable_baseIjjNS_9_IdentityESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb1ELb1EEEE5_M_eqEv:
function _ZNKSt8__detail15_Hashtable_baseIjjNS_9_IdentityESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb1ELb1EEEE5_M_eqEv called 183747 returned 100% blocks executed 100%
   183747: 1647:      _M_eq() const { return _EqualEBO::_M_cget(); }
   183747: 1647-block  0
call    0 returned 183747
------------------
_ZNKSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb1EEEE5_M_eqEv:
function _ZNKSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4pairIKS6_dENS_10_Select1stESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb0ELb1EEEE5_M_eqEv called 5222 returned 100% blocks executed 100%
     5222: 1647:      _M_eq() const { return _EqualEBO::_M_cget(); }
     5222: 1647-block  0
call    0 returned 5222
------------------
_ZNKSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb1ELb1EEEE5_M_eqEv:
function _ZNKSt8__detail15_Hashtable_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_NS_9_IdentityESt8equal_toIS6_ESt4hashIS6_ENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb1ELb1ELb1EEEE5_M_eqEv called 7803 returned 100% blocks executed 100%
     7803: 1647:      _M_eq() const { return _EqualEBO::_M_cget(); }
     7803: 1647-block  0
call    0 returned 7803
------------------
_ZNKSt8__detail15_Hashtable_baseIjSt4pairIKjdENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv:
function _ZNKSt8__detail15_Hashtable_baseIjSt4pairIKjdENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv called 1542046 returned 100% blocks executed 100%
  1542046: 1647:      _M_eq() const { return _EqualEBO::_M_cget(); }
  1542046: 1647-block  0
call    0 returned 1542046
------------------
_ZNKSt8__detail15_Hashtable_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv:
function _ZNKSt8__detail15_Hashtable_baseIjSt4pairIKjPN8cppjieba8TrieNodeEENS_10_Select1stESt8equal_toIjESt4hashIjENS_18_Mod_range_hashingENS_20_Default_ranged_hashENS_17_Hashtable_traitsILb0ELb0ELb1EEEE5_M_eqEv called 1988470 returned 100% blocks executed 100%
  1988470: 1647:      _M_eq() const { return _EqualEBO::_M_cget(); }
  1988470: 1647-block  0
call    0 returned 1988470
------------------
        -: 1648:    };
        -: 1649:
        -: 1650:  /**
        -: 1651:   *  Primary class template  _Equality.
        -: 1652:   *
        -: 1653:   *  This is for implementing equality comparison for unordered
        -: 1654:   *  containers, per N3068, by John Lakos and Pablo Halpern.
        -: 1655:   *  Algorithmically, we follow closely the reference implementations
        -: 1656:   *  therein.
        -: 1657:   */
        -: 1658:  template<typename _Key, typename _Value, typename _Alloc,
        -: 1659:	   typename _ExtractKey, typename _Equal,
        -: 1660:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1661:	   typename _RehashPolicy, typename _Traits,
        -: 1662:	   bool _Unique_keys = _Traits::__unique_keys::value>
        -: 1663:    struct _Equality;
        -: 1664:
        -: 1665:  /// unordered_map and unordered_set specializations.
        -: 1666:  template<typename _Key, typename _Value, typename _Alloc,
        -: 1667:	   typename _ExtractKey, typename _Equal,
        -: 1668:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1669:	   typename _RehashPolicy, typename _Traits>
        -: 1670:    struct _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -: 1671:		     _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>
        -: 1672:    {
        -: 1673:      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -: 1674:				     _Hash, _RangeHash, _Unused,
        -: 1675:				     _RehashPolicy, _Traits>;
        -: 1676:
        -: 1677:      bool
        -: 1678:      _M_equal(const __hashtable&) const;
        -: 1679:    };
        -: 1680:
        -: 1681:  template<typename _Key, typename _Value, typename _Alloc,
        -: 1682:	   typename _ExtractKey, typename _Equal,
        -: 1683:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1684:	   typename _RehashPolicy, typename _Traits>
        -: 1685:    bool
        -: 1686:    _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -: 1687:	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, true>::
        -: 1688:    _M_equal(const __hashtable& __other) const
        -: 1689:    {
        -: 1690:      using __node_type = typename __hashtable::__node_type;
        -: 1691:      const __hashtable* __this = static_cast<const __hashtable*>(this);
        -: 1692:      if (__this->size() != __other.size())
        -: 1693:	return false;
        -: 1694:
        -: 1695:      for (auto __itx = __this->begin(); __itx != __this->end(); ++__itx)
        -: 1696:	{
        -: 1697:	  std::size_t __ybkt = __other._M_bucket_index(*__itx._M_cur);
        -: 1698:	  auto __prev_n = __other._M_buckets[__ybkt];
        -: 1699:	  if (!__prev_n)
        -: 1700:	    return false;
        -: 1701:
        -: 1702:	  for (__node_type* __n = static_cast<__node_type*>(__prev_n->_M_nxt);;
        -: 1703:	       __n = __n->_M_next())
        -: 1704:	    {
        -: 1705:	      if (__n->_M_v() == *__itx)
        -: 1706:		break;
        -: 1707:
        -: 1708:	      if (!__n->_M_nxt
        -: 1709:		  || __other._M_bucket_index(*__n->_M_next()) != __ybkt)
        -: 1710:		return false;
        -: 1711:	    }
        -: 1712:	}
        -: 1713:
        -: 1714:      return true;
        -: 1715:    }
        -: 1716:
        -: 1717:  /// unordered_multiset and unordered_multimap specializations.
        -: 1718:  template<typename _Key, typename _Value, typename _Alloc,
        -: 1719:	   typename _ExtractKey, typename _Equal,
        -: 1720:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1721:	   typename _RehashPolicy, typename _Traits>
        -: 1722:    struct _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -: 1723:		     _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, false>
        -: 1724:    {
        -: 1725:      using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -: 1726:				     _Hash, _RangeHash, _Unused,
        -: 1727:				     _RehashPolicy, _Traits>;
        -: 1728:
        -: 1729:      bool
        -: 1730:      _M_equal(const __hashtable&) const;
        -: 1731:    };
        -: 1732:
        -: 1733:  template<typename _Key, typename _Value, typename _Alloc,
        -: 1734:	   typename _ExtractKey, typename _Equal,
        -: 1735:	   typename _Hash, typename _RangeHash, typename _Unused,
        -: 1736:	   typename _RehashPolicy, typename _Traits>
        -: 1737:    bool
        -: 1738:    _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal,
        -: 1739:	      _Hash, _RangeHash, _Unused, _RehashPolicy, _Traits, false>::
        -: 1740:    _M_equal(const __hashtable& __other) const
        -: 1741:    {
        -: 1742:      using __node_type = typename __hashtable::__node_type;
        -: 1743:      const __hashtable* __this = static_cast<const __hashtable*>(this);
        -: 1744:      if (__this->size() != __other.size())
        -: 1745:	return false;
        -: 1746:
        -: 1747:      for (auto __itx = __this->begin(); __itx != __this->end();)
        -: 1748:	{
        -: 1749:	  std::size_t __x_count = 1;
        -: 1750:	  auto __itx_end = __itx;
        -: 1751:	  for (++__itx_end; __itx_end != __this->end()
        -: 1752:		 && __this->key_eq()(_ExtractKey{}(*__itx),
        -: 1753:				     _ExtractKey{}(*__itx_end));
        -: 1754:	       ++__itx_end)
        -: 1755:	    ++__x_count;
        -: 1756:
        -: 1757:	  std::size_t __ybkt = __other._M_bucket_index(*__itx._M_cur);
        -: 1758:	  auto __y_prev_n = __other._M_buckets[__ybkt];
        -: 1759:	  if (!__y_prev_n)
        -: 1760:	    return false;
        -: 1761:
        -: 1762:	  __node_type* __y_n = static_cast<__node_type*>(__y_prev_n->_M_nxt);
        -: 1763:	  for (;;)
        -: 1764:	    {
        -: 1765:	      if (__this->key_eq()(_ExtractKey{}(__y_n->_M_v()),
        -: 1766:				   _ExtractKey{}(*__itx)))
        -: 1767:		break;
        -: 1768:
        -: 1769:	      auto __y_ref_n = __y_n;
        -: 1770:	      for (__y_n = __y_n->_M_next(); __y_n; __y_n = __y_n->_M_next())
        -: 1771:		if (!__other._M_node_equals(*__y_ref_n, *__y_n))
        -: 1772:		  break;
        -: 1773:
        -: 1774:	      if (!__y_n || __other._M_bucket_index(*__y_n) != __ybkt)
        -: 1775:		return false;
        -: 1776:	    }
        -: 1777:
        -: 1778:	  typename __hashtable::const_iterator __ity(__y_n);
        -: 1779:	  for (auto __ity_end = __ity; __ity_end != __other.end(); ++__ity_end)
        -: 1780:	    if (--__x_count == 0)
        -: 1781:	      break;
        -: 1782:
        -: 1783:	  if (__x_count != 0)
        -: 1784:	    return false;
        -: 1785:
        -: 1786:	  if (!std::is_permutation(__itx, __itx_end, __ity))
        -: 1787:	    return false;
        -: 1788:
        -: 1789:	  __itx = __itx_end;
        -: 1790:	}
        -: 1791:      return true;
        -: 1792:    }
        -: 1793:
        -: 1794:  /**
        -: 1795:   * This type deals with all allocation and keeps an allocator instance
        -: 1796:   * through inheritance to benefit from EBO when possible.
        -: 1797:   */
        -: 1798:  template<typename _NodeAlloc>
        -: 1799:    struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
        -: 1800:    {
        -: 1801:    private:
        -: 1802:      using __ebo_node_alloc = _Hashtable_ebo_helper<0, _NodeAlloc>;
        -: 1803:    public:
        -: 1804:      using __node_type = typename _NodeAlloc::value_type;
        -: 1805:      using __node_alloc_type = _NodeAlloc;
        -: 1806:      // Use __gnu_cxx to benefit from _S_always_equal and al.
        -: 1807:      using __node_alloc_traits = __gnu_cxx::__alloc_traits<__node_alloc_type>;
        -: 1808:
        -: 1809:      using __value_alloc_traits = typename __node_alloc_traits::template
        -: 1810:	rebind_traits<typename __node_type::value_type>;
        -: 1811:
        -: 1812:      using __node_ptr = __node_type*;
        -: 1813:      using __node_base = _Hash_node_base;
        -: 1814:      using __node_base_ptr = __node_base*;
        -: 1815:      using __buckets_alloc_type =
        -: 1816:	__alloc_rebind<__node_alloc_type, __node_base_ptr>;
        -: 1817:      using __buckets_alloc_traits = std::allocator_traits<__buckets_alloc_type>;
        -: 1818:      using __buckets_ptr = __node_base_ptr*;
        -: 1819:
   201018: 1820:      _Hashtable_alloc() = default;
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEEC2Ev:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEEC2Ev called 1 returned 100% blocks executed 100%
        1: 1820:      _Hashtable_alloc() = default;
        1: 1820-block  0
call    0 returned 1
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEEC2Ev:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEEC2Ev called 1 returned 100% blocks executed 100%
        1: 1820:      _Hashtable_alloc() = default;
        1: 1820-block  0
call    0 returned 1
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEEC2Ev:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEEC2Ev called 4 returned 100% blocks executed 100%
        4: 1820:      _Hashtable_alloc() = default;
        4: 1820-block  0
call    0 returned 4
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEEC2Ev:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEEC2Ev called 4 returned 100% blocks executed 100%
        4: 1820:      _Hashtable_alloc() = default;
        4: 1820-block  0
call    0 returned 4
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEEC2Ev:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEEC2Ev called 201008 returned 100% blocks executed 100%
   201008: 1820:      _Hashtable_alloc() = default;
   201008: 1820-block  0
call    0 returned 201008
------------------
        -: 1821:      _Hashtable_alloc(const _Hashtable_alloc&) = default;
        -: 1822:      _Hashtable_alloc(_Hashtable_alloc&&) = default;
        -: 1823:
        -: 1824:      template<typename _Alloc>
        -: 1825:	_Hashtable_alloc(_Alloc&& __a)
        -: 1826:	: __ebo_node_alloc(std::forward<_Alloc>(__a))
        -: 1827:	{ }
        -: 1828:
        -: 1829:      __node_alloc_type&
  3588838: 1830:      _M_node_allocator()
  3588838: 1831:      { return __ebo_node_alloc::_M_get(); }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE17_M_node_allocatorEv:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE17_M_node_allocatorEv called 5132 returned 100% blocks executed 100%
     5132: 1830:      _M_node_allocator()
     5132: 1831:      { return __ebo_node_alloc::_M_get(); }
     5132: 1831-block  0
call    0 returned 5132
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE17_M_node_allocatorEv:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE17_M_node_allocatorEv called 1035334 returned 100% blocks executed 100%
  1035334: 1830:      _M_node_allocator()
  1035334: 1831:      { return __ebo_node_alloc::_M_get(); }
  1035334: 1831-block  0
call    0 returned 1035334
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE17_M_node_allocatorEv:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE17_M_node_allocatorEv called 140978 returned 100% blocks executed 100%
   140978: 1830:      _M_node_allocator()
   140978: 1831:      { return __ebo_node_alloc::_M_get(); }
   140978: 1831-block  0
call    0 returned 140978
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE17_M_node_allocatorEv:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE17_M_node_allocatorEv called 66 returned 100% blocks executed 100%
       66: 1830:      _M_node_allocator()
       66: 1831:      { return __ebo_node_alloc::_M_get(); }
       66: 1831-block  0
call    0 returned 66
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE17_M_node_allocatorEv:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE17_M_node_allocatorEv called 2407328 returned 100% blocks executed 100%
  2407328: 1830:      _M_node_allocator()
  2407328: 1831:      { return __ebo_node_alloc::_M_get(); }
  2407328: 1831-block  0
call    0 returned 2407328
------------------
        -: 1832:
        -: 1833:      const __node_alloc_type&
        -: 1834:      _M_node_allocator() const
        -: 1835:      { return __ebo_node_alloc::_M_cget(); }
        -: 1836:
        -: 1837:      // Allocate a node and construct an element within it.
        -: 1838:      template<typename... _Args>
        -: 1839:	__node_ptr
        -: 1840:	_M_allocate_node(_Args&&... __args);
        -: 1841:
        -: 1842:      // Destroy the element within a node and deallocate the node.
        -: 1843:      void
        -: 1844:      _M_deallocate_node(__node_ptr __n);
        -: 1845:
        -: 1846:      // Deallocate a node.
        -: 1847:      void
        -: 1848:      _M_deallocate_node_ptr(__node_ptr __n);
        -: 1849:
        -: 1850:      // Deallocate the linked list of nodes pointed to by __n.
        -: 1851:      // The elements within the nodes are destroyed.
        -: 1852:      void
        -: 1853:      _M_deallocate_nodes(__node_ptr __n);
        -: 1854:
        -: 1855:      __buckets_ptr
        -: 1856:      _M_allocate_buckets(std::size_t __bkt_count);
        -: 1857:
        -: 1858:      void
        -: 1859:      _M_deallocate_buckets(__buckets_ptr, std::size_t __bkt_count);
        -: 1860:    };
        -: 1861:
        -: 1862:  // Definitions of class template _Hashtable_alloc's out-of-line member
        -: 1863:  // functions.
        -: 1864:  template<typename _NodeAlloc>
        -: 1865:    template<typename... _Args>
        -: 1866:      auto
   793333: 1867:      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
        -: 1868:      -> __node_ptr
        -: 1869:      {
   793333: 1870:	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
   793333: 1871:	__node_ptr __n = std::__to_address(__nptr);
        -: 1872:	__try
        -: 1873:	  {
   793333: 1874:	    ::new ((void*)__n) __node_type;
   793333: 1875:	    __node_alloc_traits::construct(_M_node_allocator(),
        -: 1876:					   __n->_M_valptr(),
        -: 1877:					   std::forward<_Args>(__args)...);
   793333: 1878:	    return __n;
        -: 1879:	  }
    =====: 1880:	__catch(...)
        -: 1881:	  {
    =====: 1882:	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
    =====: 1883:	    __throw_exception_again;
        -: 1884:	  }
        -: 1885:      }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE16_M_allocate_nodeIJRKS7_EEEPS8_DpOT_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE16_M_allocate_nodeIJRKS7_EEEPS8_DpOT_ called 1279 returned 100% blocks executed 67%
     1279: 1867:      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
        -: 1868:      -> __node_ptr
        -: 1869:      {
     1279: 1870:	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
     1279: 1870-block  0
call    0 returned 1279
call    1 returned 1279
     1279: 1871:	__node_ptr __n = std::__to_address(__nptr);
call    0 returned 1279
        -: 1872:	__try
        -: 1873:	  {
     1279: 1874:	    ::new ((void*)__n) __node_type;
call    0 returned 1279
call    1 returned 1279
     1279: 1875:	    __node_alloc_traits::construct(_M_node_allocator(),
call    0 returned 1279
call    1 returned 1279
call    2 returned 1279
branch  3 taken 1279 (fallthrough)
branch  4 taken 0 (throw)
     1279: 1875-block  0
call    5 returned 1279
branch  6 taken 1279 (fallthrough)
branch  7 taken 0 (throw)
        -: 1876:					   __n->_M_valptr(),
        -: 1877:					   std::forward<_Args>(__args)...);
     1279: 1878:	    return __n;
     1279: 1878-block  0
     1279: 1878-block  1
        -: 1879:	  }
    =====: 1880:	__catch(...)
    $$$$$: 1880-block  0
    $$$$$: 1880-block  1
call    0 never executed
    $$$$$: 1880-block  2
call    1 never executed
        -: 1881:	  {
    =====: 1882:	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1882-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====: 1883:	    __throw_exception_again;
    $$$$$: 1883-block  0
call    0 never executed
        -: 1884:	  }
        -: 1885:      }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE16_M_allocate_nodeIJRKjEEEPS2_DpOT_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE16_M_allocate_nodeIJRKjEEEPS2_DpOT_ called 15 returned 100% blocks executed 67%
       15: 1867:      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
        -: 1868:      -> __node_ptr
        -: 1869:      {
       15: 1870:	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
       15: 1870-block  0
call    0 returned 15
call    1 returned 15
       15: 1871:	__node_ptr __n = std::__to_address(__nptr);
call    0 returned 15
        -: 1872:	__try
        -: 1873:	  {
       15: 1874:	    ::new ((void*)__n) __node_type;
call    0 returned 15
call    1 returned 15
       15: 1875:	    __node_alloc_traits::construct(_M_node_allocator(),
call    0 returned 15
call    1 returned 15
call    2 returned 15
branch  3 taken 15 (fallthrough)
branch  4 taken 0 (throw)
       15: 1875-block  0
call    5 returned 15
        -: 1876:					   __n->_M_valptr(),
        -: 1877:					   std::forward<_Args>(__args)...);
       15: 1878:	    return __n;
       15: 1878-block  0
        -: 1879:	  }
    =====: 1880:	__catch(...)
    $$$$$: 1880-block  0
    $$$$$: 1880-block  1
call    0 never executed
    $$$$$: 1880-block  2
call    1 never executed
        -: 1881:	  {
    =====: 1882:	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1882-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====: 1883:	    __throw_exception_again;
    $$$$$: 1883-block  0
call    0 never executed
        -: 1884:	  }
        -: 1885:      }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE16_M_allocate_nodeIJS2_IjS6_EEEEPS8_DpOT_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE16_M_allocate_nodeIJS2_IjS6_EEEEPS8_DpOT_ called 497989 returned 100% blocks executed 67%
   497989: 1867:      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
        -: 1868:      -> __node_ptr
        -: 1869:      {
   497989: 1870:	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
   497989: 1870-block  0
call    0 returned 497989
call    1 returned 497989
   497989: 1871:	__node_ptr __n = std::__to_address(__nptr);
call    0 returned 497989
        -: 1872:	__try
        -: 1873:	  {
   497989: 1874:	    ::new ((void*)__n) __node_type;
call    0 returned 497989
call    1 returned 497989
   497989: 1875:	    __node_alloc_traits::construct(_M_node_allocator(),
call    0 returned 497989
call    1 returned 497989
call    2 returned 497989
branch  3 taken 497989 (fallthrough)
branch  4 taken 0 (throw)
   497989: 1875-block  0
call    5 returned 497989
branch  6 taken 497989 (fallthrough)
branch  7 taken 0 (throw)
        -: 1876:					   __n->_M_valptr(),
        -: 1877:					   std::forward<_Args>(__args)...);
   497989: 1878:	    return __n;
   497989: 1878-block  0
   497989: 1878-block  1
        -: 1879:	  }
    =====: 1880:	__catch(...)
    $$$$$: 1880-block  0
    $$$$$: 1880-block  1
call    0 never executed
    $$$$$: 1880-block  2
call    1 never executed
        -: 1881:	  {
    =====: 1882:	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1882-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====: 1883:	    __throw_exception_again;
    $$$$$: 1883-block  0
call    0 never executed
        -: 1884:	  }
        -: 1885:      }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS9_EESI_IJEEEEEPSB_DpOT_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS9_EESI_IJEEEEEPSB_DpOT_ called 258826 returned 100% blocks executed 70%
   258826: 1867:      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
        -: 1868:      -> __node_ptr
        -: 1869:      {
   258826: 1870:	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
   258826: 1870-block  0
call    0 returned 258826
call    1 returned 258826
   258826: 1871:	__node_ptr __n = std::__to_address(__nptr);
call    0 returned 258826
        -: 1872:	__try
        -: 1873:	  {
   258826: 1874:	    ::new ((void*)__n) __node_type;
call    0 returned 258826
call    1 returned 258826
   258826: 1875:	    __node_alloc_traits::construct(_M_node_allocator(),
call    0 returned 258826
call    1 returned 258826
call    2 returned 258826
call    3 returned 258826
call    4 returned 258826
branch  5 taken 258826 (fallthrough)
branch  6 taken 0 (throw)
   258826: 1875-block  0
call    7 returned 258826
branch  8 taken 258826 (fallthrough)
branch  9 taken 0 (throw)
        -: 1876:					   __n->_M_valptr(),
        -: 1877:					   std::forward<_Args>(__args)...);
   258826: 1878:	    return __n;
   258826: 1878-block  0
   258826: 1878-block  1
        -: 1879:	  }
    =====: 1880:	__catch(...)
    $$$$$: 1880-block  0
    $$$$$: 1880-block  1
call    0 never executed
    $$$$$: 1880-block  2
call    1 never executed
        -: 1881:	  {
    =====: 1882:	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1882-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====: 1883:	    __throw_exception_again;
    $$$$$: 1883-block  0
call    0 never executed
        -: 1884:	  }
        -: 1885:      }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESC_IJEEEEEPS5_DpOT_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE16_M_allocate_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESC_IJEEEEEPS5_DpOT_ called 35224 returned 100% blocks executed 70%
    35224: 1867:      _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
        -: 1868:      -> __node_ptr
        -: 1869:      {
    35224: 1870:	auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
    35224: 1870-block  0
call    0 returned 35224
call    1 returned 35224
    35224: 1871:	__node_ptr __n = std::__to_address(__nptr);
call    0 returned 35224
        -: 1872:	__try
        -: 1873:	  {
    35224: 1874:	    ::new ((void*)__n) __node_type;
call    0 returned 35224
call    1 returned 35224
    35224: 1875:	    __node_alloc_traits::construct(_M_node_allocator(),
call    0 returned 35224
call    1 returned 35224
call    2 returned 35224
call    3 returned 35224
call    4 returned 35224
branch  5 taken 35224 (fallthrough)
branch  6 taken 0 (throw)
    35224: 1875-block  0
call    7 returned 35224
branch  8 taken 35224 (fallthrough)
branch  9 taken 0 (throw)
        -: 1876:					   __n->_M_valptr(),
        -: 1877:					   std::forward<_Args>(__args)...);
    35224: 1878:	    return __n;
    35224: 1878-block  0
    35224: 1878-block  1
        -: 1879:	  }
    =====: 1880:	__catch(...)
    $$$$$: 1880-block  0
    $$$$$: 1880-block  1
call    0 never executed
    $$$$$: 1880-block  2
call    1 never executed
        -: 1881:	  {
    =====: 1882:	    __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
call    0 never executed
branch  1 never executed
branch  2 never executed
    $$$$$: 1882-block  0
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====: 1883:	    __throw_exception_again;
    $$$$$: 1883-block  0
call    0 never executed
        -: 1884:	  }
        -: 1885:      }
------------------
        -: 1886:
        -: 1887:  template<typename _NodeAlloc>
        -: 1888:    void
   793333: 1889:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
        -: 1890:    {
   793333: 1891:      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
   793333: 1892:      _M_deallocate_node_ptr(__n);
   793333: 1893:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE18_M_deallocate_nodeEPS8_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE18_M_deallocate_nodeEPS8_ called 1279 returned 100% blocks executed 100%
     1279: 1889:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
        -: 1890:    {
     1279: 1891:      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
     1279: 1891-block  0
call    0 returned 1279
call    1 returned 1279
call    2 returned 1279
     1279: 1892:      _M_deallocate_node_ptr(__n);
call    0 returned 1279
     1279: 1893:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE18_M_deallocate_nodeEPSB_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE18_M_deallocate_nodeEPSB_ called 258826 returned 100% blocks executed 100%
   258826: 1889:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
        -: 1890:    {
   258826: 1891:      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
   258826: 1891-block  0
call    0 returned 258826
call    1 returned 258826
call    2 returned 258826
   258826: 1892:      _M_deallocate_node_ptr(__n);
call    0 returned 258826
   258826: 1893:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE18_M_deallocate_nodeEPS5_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE18_M_deallocate_nodeEPS5_ called 35224 returned 100% blocks executed 100%
    35224: 1889:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
        -: 1890:    {
    35224: 1891:      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
    35224: 1891-block  0
call    0 returned 35224
call    1 returned 35224
call    2 returned 35224
    35224: 1892:      _M_deallocate_node_ptr(__n);
call    0 returned 35224
    35224: 1893:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE18_M_deallocate_nodeEPS2_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE18_M_deallocate_nodeEPS2_ called 15 returned 100% blocks executed 100%
       15: 1889:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
        -: 1890:    {
       15: 1891:      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
       15: 1891-block  0
call    0 returned 15
call    1 returned 15
call    2 returned 15
       15: 1892:      _M_deallocate_node_ptr(__n);
call    0 returned 15
       15: 1893:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE18_M_deallocate_nodeEPS8_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE18_M_deallocate_nodeEPS8_ called 497989 returned 100% blocks executed 100%
   497989: 1889:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_ptr __n)
        -: 1890:    {
   497989: 1891:      __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
   497989: 1891-block  0
call    0 returned 497989
call    1 returned 497989
call    2 returned 497989
   497989: 1892:      _M_deallocate_node_ptr(__n);
call    0 returned 497989
   497989: 1893:    }
------------------
        -: 1894:
        -: 1895:  template<typename _NodeAlloc>
        -: 1896:    void
   793333: 1897:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
        -: 1898:    {
        -: 1899:      typedef typename __node_alloc_traits::pointer _Ptr;
   793333: 1900:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
   793333: 1901:      __n->~__node_type();
   793333: 1902:      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
   793333: 1903:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE22_M_deallocate_node_ptrEPS8_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE22_M_deallocate_node_ptrEPS8_ called 1279 returned 100% blocks executed 100%
     1279: 1897:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
        -: 1898:    {
        -: 1899:      typedef typename __node_alloc_traits::pointer _Ptr;
     1279: 1900:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
     1279: 1900-block  0
call    0 returned 1279
     1279: 1901:      __n->~__node_type();
     1279: 1902:      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
call    0 returned 1279
call    1 returned 1279
     1279: 1903:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE22_M_deallocate_node_ptrEPSB_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE22_M_deallocate_node_ptrEPSB_ called 258826 returned 100% blocks executed 100%
   258826: 1897:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
        -: 1898:    {
        -: 1899:      typedef typename __node_alloc_traits::pointer _Ptr;
   258826: 1900:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
   258826: 1900-block  0
call    0 returned 258826
   258826: 1901:      __n->~__node_type();
   258826: 1902:      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
call    0 returned 258826
call    1 returned 258826
   258826: 1903:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE22_M_deallocate_node_ptrEPS5_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE22_M_deallocate_node_ptrEPS5_ called 35224 returned 100% blocks executed 100%
    35224: 1897:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
        -: 1898:    {
        -: 1899:      typedef typename __node_alloc_traits::pointer _Ptr;
    35224: 1900:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
    35224: 1900-block  0
call    0 returned 35224
    35224: 1901:      __n->~__node_type();
    35224: 1902:      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
call    0 returned 35224
call    1 returned 35224
    35224: 1903:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE22_M_deallocate_node_ptrEPS2_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE22_M_deallocate_node_ptrEPS2_ called 15 returned 100% blocks executed 100%
       15: 1897:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
        -: 1898:    {
        -: 1899:      typedef typename __node_alloc_traits::pointer _Ptr;
       15: 1900:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
       15: 1900-block  0
call    0 returned 15
       15: 1901:      __n->~__node_type();
       15: 1902:      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
call    0 returned 15
call    1 returned 15
       15: 1903:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE22_M_deallocate_node_ptrEPS8_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE22_M_deallocate_node_ptrEPS8_ called 497989 returned 100% blocks executed 100%
   497989: 1897:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_ptr __n)
        -: 1898:    {
        -: 1899:      typedef typename __node_alloc_traits::pointer _Ptr;
   497989: 1900:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
   497989: 1900-block  0
call    0 returned 497989
   497989: 1901:      __n->~__node_type();
   497989: 1902:      __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
call    0 returned 497989
call    1 returned 497989
   497989: 1903:    }
------------------
        -: 1904:
        -: 1905:  template<typename _NodeAlloc>
        -: 1906:    void
   201021: 1907:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
        -: 1908:    {
   994354: 1909:      while (__n)
        -: 1910:	{
   793333: 1911:	  __node_ptr __tmp = __n;
   793333: 1912:	  __n = __n->_M_next();
   793333: 1913:	  _M_deallocate_node(__tmp);
        -: 1914:	}
   201021: 1915:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE19_M_deallocate_nodesEPS8_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE19_M_deallocate_nodesEPS8_ called 1 returned 100% blocks executed 100%
        1: 1907:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
        -: 1908:    {
     1280: 1909:      while (__n)
        1: 1909-block  0
     1280: 1909-block  1
branch  0 taken 1279
branch  1 taken 1 (fallthrough)
        -: 1910:	{
     1279: 1911:	  __node_ptr __tmp = __n;
     1279: 1912:	  __n = __n->_M_next();
     1279: 1912-block  0
call    0 returned 1279
     1279: 1913:	  _M_deallocate_node(__tmp);
call    0 returned 1279
        -: 1914:	}
        1: 1915:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE19_M_deallocate_nodesEPSB_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE19_M_deallocate_nodesEPSB_ called 1 returned 100% blocks executed 100%
        1: 1907:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
        -: 1908:    {
   258827: 1909:      while (__n)
        1: 1909-block  0
   258827: 1909-block  1
branch  0 taken 258826
branch  1 taken 1 (fallthrough)
        -: 1910:	{
   258826: 1911:	  __node_ptr __tmp = __n;
   258826: 1912:	  __n = __n->_M_next();
   258826: 1912-block  0
call    0 returned 258826
   258826: 1913:	  _M_deallocate_node(__tmp);
call    0 returned 258826
        -: 1914:	}
        1: 1915:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE19_M_deallocate_nodesEPS5_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE19_M_deallocate_nodesEPS5_ called 4 returned 100% blocks executed 100%
        4: 1907:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
        -: 1908:    {
    35228: 1909:      while (__n)
        4: 1909-block  0
    35228: 1909-block  1
branch  0 taken 35224
branch  1 taken 4 (fallthrough)
        -: 1910:	{
    35224: 1911:	  __node_ptr __tmp = __n;
    35224: 1912:	  __n = __n->_M_next();
    35224: 1912-block  0
call    0 returned 35224
    35224: 1913:	  _M_deallocate_node(__tmp);
call    0 returned 35224
        -: 1914:	}
        4: 1915:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE19_M_deallocate_nodesEPS2_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE19_M_deallocate_nodesEPS2_ called 7 returned 100% blocks executed 100%
        7: 1907:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
        -: 1908:    {
       22: 1909:      while (__n)
        7: 1909-block  0
       22: 1909-block  1
branch  0 taken 15
branch  1 taken 7 (fallthrough)
        -: 1910:	{
       15: 1911:	  __node_ptr __tmp = __n;
       15: 1912:	  __n = __n->_M_next();
       15: 1912-block  0
call    0 returned 15
       15: 1913:	  _M_deallocate_node(__tmp);
call    0 returned 15
        -: 1914:	}
        7: 1915:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE19_M_deallocate_nodesEPS8_:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE19_M_deallocate_nodesEPS8_ called 201008 returned 100% blocks executed 100%
   201008: 1907:    _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_ptr __n)
        -: 1908:    {
   698997: 1909:      while (__n)
   201008: 1909-block  0
   698997: 1909-block  1
branch  0 taken 497989
branch  1 taken 201008 (fallthrough)
        -: 1910:	{
   497989: 1911:	  __node_ptr __tmp = __n;
   497989: 1912:	  __n = __n->_M_next();
   497989: 1912-block  0
call    0 returned 497989
   497989: 1913:	  _M_deallocate_node(__tmp);
call    0 returned 497989
        -: 1914:	}
   201008: 1915:    }
------------------
        -: 1916:
        -: 1917:  template<typename _NodeAlloc>
        -: 1918:    auto
   207753: 1919:    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
        -: 1920:    -> __buckets_ptr
        -: 1921:    {
   207753: 1922:      __buckets_alloc_type __alloc(_M_node_allocator());
        -: 1923:
   207753: 1924:      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
   207753: 1925:      __buckets_ptr __p = std::__to_address(__ptr);
   207753: 1926:      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   207753: 1927:      return __p;
   207753: 1928:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE19_M_allocate_bucketsEy:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE19_M_allocate_bucketsEy called 8 returned 100% blocks executed 80%
        8: 1919:    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
        -: 1920:    -> __buckets_ptr
        -: 1921:    {
        8: 1922:      __buckets_alloc_type __alloc(_M_node_allocator());
        8: 1922-block  0
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 1922-block  1
call    3 returned 8
        -: 1923:
        8: 1924:      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 1925:      __buckets_ptr __p = std::__to_address(__ptr);
        8: 1925-block  0
call    0 returned 8
        8: 1926:      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
        8: 1927:      return __p;
        8: 1927-block  0
        8: 1928:    }
call    0 returned 8
    $$$$$: 1928-block  0
call    1 never executed
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE19_M_allocate_bucketsEy:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE19_M_allocate_bucketsEy called 3 returned 100% blocks executed 80%
        3: 1919:    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
        -: 1920:    -> __buckets_ptr
        -: 1921:    {
        3: 1922:      __buckets_alloc_type __alloc(_M_node_allocator());
        3: 1922-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 1922-block  1
call    3 returned 3
        -: 1923:
        3: 1924:      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 1925:      __buckets_ptr __p = std::__to_address(__ptr);
        3: 1925-block  0
call    0 returned 3
        3: 1926:      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
        3: 1927:      return __p;
        3: 1927-block  0
        3: 1928:    }
call    0 returned 3
    $$$$$: 1928-block  0
call    1 never executed
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE19_M_allocate_bucketsEy:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE19_M_allocate_bucketsEy called 207686 returned 100% blocks executed 80%
   207686: 1919:    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
        -: 1920:    -> __buckets_ptr
        -: 1921:    {
   207686: 1922:      __buckets_alloc_type __alloc(_M_node_allocator());
   207686: 1922-block  0
call    0 returned 207686
branch  1 taken 207686 (fallthrough)
branch  2 taken 0 (throw)
   207686: 1922-block  1
call    3 returned 207686
        -: 1923:
   207686: 1924:      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
call    0 returned 207686
branch  1 taken 207686 (fallthrough)
branch  2 taken 0 (throw)
   207686: 1925:      __buckets_ptr __p = std::__to_address(__ptr);
   207686: 1925-block  0
call    0 returned 207686
   207686: 1926:      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
   207686: 1927:      return __p;
   207686: 1927-block  0
   207686: 1928:    }
call    0 returned 207686
    $$$$$: 1928-block  0
call    1 never executed
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE19_M_allocate_bucketsEy:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE19_M_allocate_bucketsEy called 15 returned 100% blocks executed 80%
       15: 1919:    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
        -: 1920:    -> __buckets_ptr
        -: 1921:    {
       15: 1922:      __buckets_alloc_type __alloc(_M_node_allocator());
       15: 1922-block  0
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15: 1922-block  1
call    3 returned 15
        -: 1923:
       15: 1924:      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15: 1925:      __buckets_ptr __p = std::__to_address(__ptr);
       15: 1925-block  0
call    0 returned 15
       15: 1926:      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
       15: 1927:      return __p;
       15: 1927-block  0
       15: 1928:    }
call    0 returned 15
    $$$$$: 1928-block  0
call    1 never executed
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE19_M_allocate_bucketsEy:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE19_M_allocate_bucketsEy called 41 returned 100% blocks executed 80%
       41: 1919:    _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(std::size_t __bkt_count)
        -: 1920:    -> __buckets_ptr
        -: 1921:    {
       41: 1922:      __buckets_alloc_type __alloc(_M_node_allocator());
       41: 1922-block  0
call    0 returned 41
branch  1 taken 41 (fallthrough)
branch  2 taken 0 (throw)
       41: 1922-block  1
call    3 returned 41
        -: 1923:
       41: 1924:      auto __ptr = __buckets_alloc_traits::allocate(__alloc, __bkt_count);
call    0 returned 41
branch  1 taken 41 (fallthrough)
branch  2 taken 0 (throw)
       41: 1925:      __buckets_ptr __p = std::__to_address(__ptr);
       41: 1925-block  0
call    0 returned 41
       41: 1926:      __builtin_memset(__p, 0, __bkt_count * sizeof(__node_base_ptr));
       41: 1927:      return __p;
       41: 1927-block  0
       41: 1928:    }
call    0 returned 41
    $$$$$: 1928-block  0
call    1 never executed
------------------
        -: 1929:
        -: 1930:  template<typename _NodeAlloc>
        -: 1931:    void
   207753: 1932:    _Hashtable_alloc<_NodeAlloc>::
        -: 1933:    _M_deallocate_buckets(__buckets_ptr __bkts,
        -: 1934:			  std::size_t __bkt_count)
        -: 1935:    {
        -: 1936:      typedef typename __buckets_alloc_traits::pointer _Ptr;
   207753: 1937:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
   207753: 1938:      __buckets_alloc_type __alloc(_M_node_allocator());
   207753: 1939:      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
   207753: 1940:    }
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEy:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEy called 8 returned 100% blocks executed 78%
        8: 1932:    _Hashtable_alloc<_NodeAlloc>::
        -: 1933:    _M_deallocate_buckets(__buckets_ptr __bkts,
        -: 1934:			  std::size_t __bkt_count)
        -: 1935:    {
        -: 1936:      typedef typename __buckets_alloc_traits::pointer _Ptr;
        8: 1937:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
        8: 1937-block  0
call    0 returned 8
        8: 1938:      __buckets_alloc_type __alloc(_M_node_allocator());
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 1938-block  0
call    3 returned 8
        8: 1939:      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
call    0 returned 8
branch  1 taken 8 (fallthrough)
branch  2 taken 0 (throw)
        8: 1940:    }
        8: 1940-block  0
call    0 returned 8
    $$$$$: 1940-block  1
call    1 never executed
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEy:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEdELb1EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEy called 15 returned 100% blocks executed 78%
       15: 1932:    _Hashtable_alloc<_NodeAlloc>::
        -: 1933:    _M_deallocate_buckets(__buckets_ptr __bkts,
        -: 1934:			  std::size_t __bkt_count)
        -: 1935:    {
        -: 1936:      typedef typename __buckets_alloc_traits::pointer _Ptr;
       15: 1937:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
       15: 1937-block  0
call    0 returned 15
       15: 1938:      __buckets_alloc_type __alloc(_M_node_allocator());
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15: 1938-block  0
call    3 returned 15
       15: 1939:      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
call    0 returned 15
branch  1 taken 15 (fallthrough)
branch  2 taken 0 (throw)
       15: 1940:    }
       15: 1940-block  0
call    0 returned 15
    $$$$$: 1940-block  1
call    1 never executed
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEy:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjdELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEy called 41 returned 100% blocks executed 78%
       41: 1932:    _Hashtable_alloc<_NodeAlloc>::
        -: 1933:    _M_deallocate_buckets(__buckets_ptr __bkts,
        -: 1934:			  std::size_t __bkt_count)
        -: 1935:    {
        -: 1936:      typedef typename __buckets_alloc_traits::pointer _Ptr;
       41: 1937:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
       41: 1937-block  0
call    0 returned 41
       41: 1938:      __buckets_alloc_type __alloc(_M_node_allocator());
call    0 returned 41
branch  1 taken 41 (fallthrough)
branch  2 taken 0 (throw)
       41: 1938-block  0
call    3 returned 41
       41: 1939:      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
call    0 returned 41
branch  1 taken 41 (fallthrough)
branch  2 taken 0 (throw)
       41: 1940:    }
       41: 1940-block  0
call    0 returned 41
    $$$$$: 1940-block  1
call    1 never executed
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEy:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeIjLb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEy called 3 returned 100% blocks executed 78%
        3: 1932:    _Hashtable_alloc<_NodeAlloc>::
        -: 1933:    _M_deallocate_buckets(__buckets_ptr __bkts,
        -: 1934:			  std::size_t __bkt_count)
        -: 1935:    {
        -: 1936:      typedef typename __buckets_alloc_traits::pointer _Ptr;
        3: 1937:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
        3: 1937-block  0
call    0 returned 3
        3: 1938:      __buckets_alloc_type __alloc(_M_node_allocator());
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 1938-block  0
call    3 returned 3
        3: 1939:      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3: 1940:    }
        3: 1940-block  0
call    0 returned 3
    $$$$$: 1940-block  1
call    1 never executed
------------------
_ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEy:
function _ZNSt8__detail16_Hashtable_allocISaINS_10_Hash_nodeISt4pairIKjPN8cppjieba8TrieNodeEELb0EEEEE21_M_deallocate_bucketsEPPNS_15_Hash_node_baseEy called 207686 returned 100% blocks executed 78%
   207686: 1932:    _Hashtable_alloc<_NodeAlloc>::
        -: 1933:    _M_deallocate_buckets(__buckets_ptr __bkts,
        -: 1934:			  std::size_t __bkt_count)
        -: 1935:    {
        -: 1936:      typedef typename __buckets_alloc_traits::pointer _Ptr;
   207686: 1937:      auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
   207686: 1937-block  0
call    0 returned 207686
   207686: 1938:      __buckets_alloc_type __alloc(_M_node_allocator());
call    0 returned 207686
branch  1 taken 207686 (fallthrough)
branch  2 taken 0 (throw)
   207686: 1938-block  0
call    3 returned 207686
   207686: 1939:      __buckets_alloc_traits::deallocate(__alloc, __ptr, __bkt_count);
call    0 returned 207686
branch  1 taken 207686 (fallthrough)
branch  2 taken 0 (throw)
   207686: 1940:    }
   207686: 1940-block  0
call    0 returned 207686
    $$$$$: 1940-block  1
call    1 never executed
------------------
        -: 1941:
        -: 1942: ///@} hashtable-detail
        -: 1943:} // namespace __detail
        -: 1944:_GLIBCXX_END_NAMESPACE_VERSION
        -: 1945:} // namespace std
        -: 1946:
        -: 1947:#endif // _HASHTABLE_POLICY_H
